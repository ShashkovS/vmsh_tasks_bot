# -*- coding: utf-8 -*-
import logging
import os
import io
import datetime
import db_helper
import hashlib
import re
import asyncio
from consts import *
import aiogram
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.webhook import configure_app, types, web
from aiogram.utils.executor import start_polling
from aiogram.utils.exceptions import MessageNotModified
from urllib.parse import urlencode

logging.basicConfig(level=logging.INFO)

if os.environ.get('PROD', None) == 'true':
    logging.info(('*' * 50 + '\n') * 5)
    logging.info('Production mode')
    logging.info('*' * 50)
    API_TOKEN = open('creds_prod/telegram_bot_key_prod').read().strip()
    WEBHOOK_HOST = 'vmsh179bot.proj179.ru'
    WEBHOOK_PORT = 443
else:
    logging.info('Developer mode')
    API_TOKEN = open('creds/telegram_bot_key').read().strip()
    WEBHOOK_HOST = 'vmshtasksbot.proj179.ru'
    WEBHOOK_PORT = 443
SOLS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'solutions')
WHITEBOARD_LINK = "https://www.shashkovs.ru/jitboard.html?{}"
USE_WEBHOOKS = False

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Å–≤–æ—è –±–∞–∑–∞
db_name = hashlib.md5(API_TOKEN.encode('utf-8')).hexdigest() + '.db'
db, users, problems, states, written_queue, waitlist = db_helper.init_db_and_objects(db_name)

# –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
bot = aiogram.Bot(API_TOKEN)
dispatcher = Dispatcher(bot)


async def bot_edit_message_text(*args, **kwargs):
    try:
        await bot.edit_message_text(*args, **kwargs)
    except MessageNotModified as e:
        logging.error(f'SHIT: {e}')


async def bot_edit_message_reply_markup(*args, **kwargs):
    try:
        await bot.edit_message_reply_markup(*args, **kwargs)
    except MessageNotModified as e:
        logging.error(f'SHIT: {e}')


async def bot_answer_callback_query(*args, **kwargs):
    try:
        await bot.answer_callback_query(*args, **kwargs)
    except Exception as e:
        logging.error(f'SHIT: {e}')


async def update_all_internal_data(message: types.Message):
    global db, users, problems, states, written_queue, waitlist
    db, users, problems, states, written_queue, waitlist = db_helper.init_db_and_objects(db_name, refresh=True)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
    )
    user = users.get_by_chat_id(message.chat.id)
    if user.type == USER_TYPE_STUDENT:
        states.set_by_user_id(user.id, STATE_GET_TASK_INFO)
    elif user.type == USER_TYPE_TEACHER:
        states.set_by_user_id(user.id, STATE_TEACHER_SELECT_ACTION)
    await process_regular_message(message)


async def prc_get_user_info_state(message: types.Message, user: db_helper.User):
    user = users.get_by_token(message.text)
    if user is None:
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîÅ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.\n–ü–∞—Ä–æ–ª—å –±—ã–ª –≤–∞–º –≤—ã—Å–ª–∞–Ω –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ, –æ–Ω –∏–º–µ–µ—Ç –≤–∏–¥ ¬´pa1ro1¬ª",
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"ü§ñ –û–ö, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name} {user.surname}",
        )
        users.set_chat_id(user, message.chat.id)
        if user.type == USER_TYPE_STUDENT:
            states.set_by_user_id(user.id, STATE_GET_TASK_INFO)
        elif user.type == USER_TYPE_TEACHER:
            states.set_by_user_id(user.id, STATE_TEACHER_SELECT_ACTION)
        await process_regular_message(message)


async def prc_WTF(message: types.Message, user: db_helper.User):
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚ò¢Ô∏è –í—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –±–æ—Ç –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç–∞—Ü–∏–∏ :(. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞!",
    )
    logging.error(f"prc_WTF: {user!r} {message!r}")
    states.set_by_user_id(user.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


def build_problems_keyboard(lesson_num: int, student: db_helper.User):
    solved = db.check_student_solved(student.id, student.level, lesson_num)
    being_checked = db.check_student_sent_written(student.id, lesson_num)
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for problem in problems.get_by_lesson(student.level, lesson_num):
        if problem.id in solved:
            tick = '‚úÖ'
        elif problem.id in being_checked:
            tick = '‚ùì'
        elif problem.prob_type == PROB_TYPE_ORALLY and states.get_by_user_id(student.id)['oral_problem_id'] is not None:
            tick = '‚åõ'
        else:
            tick = '‚¨ú'
        task_button = types.InlineKeyboardButton(
            text=f"{tick} {problem}",
            callback_data=f"{CALLBACK_PROBLEM_SELECTED}_{problem.id}"
        )
        keyboard_markup.add(task_button)
    # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É —Ñ–∏—á—É
    # to_lessons_button = types.InlineKeyboardButton(
    #     text="–ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤",
    #     callback_data=f"{CALLBACK_SHOW_LIST_OF_LISTS}"
    # )
    # keyboard_markup.add(to_lessons_button)
    return keyboard_markup


def build_lessons_keyboard():
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    logging.error('–ó–¥–µ—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ level')
    # TODO add level
    # for lesson in problems.all_lessons:
    #     lesson_button = types.InlineKeyboardButton(
    #         text=f"–õ–∏—Å—Ç–æ–∫ {lesson}",
    #         callback_data=f"{CALLBACK_LIST_SELECTED}_{lesson}",
    #     )
    #     keyboard_markup.add(lesson_button)
    return keyboard_markup


def build_test_answers_keyboard(choices):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for choice in choices:
        lesson_button = types.InlineKeyboardButton(
            text=choice,
            callback_data=f"{CALLBACK_ONE_OF_TEST_ANSWER_SELECTED}_{choice}",
        )
        keyboard_markup.add(lesson_button)
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK_CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_cancel_task_submission_keyboard():
    keyboard_markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK_CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_exit_waitlist_keyboard():
    keyboard_markup = types.ReplyKeyboardMarkup(selective=True, resize_keyboard=True)
    exit_button = types.KeyboardButton(
        text="/exit_waitlist –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
    )
    keyboard_markup.add(exit_button)
    return keyboard_markup


def build_teacher_actions_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    get_written_task_button = types.InlineKeyboardButton(
        text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
        callback_data=CALLBACK_GET_WRITTEN_TASK
    )
    keyboard.add(get_written_task_button)
    get_queue_top_button = types.InlineKeyboardButton(
        text="–í—ã–∑–≤–∞—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É",
        callback_data=CALLBACK_GET_QUEUE_TOP
    )
    keyboard.add(get_queue_top_button)
    return keyboard


def build_teacher_select_written_problem_keyboard(top: list):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=7)
    for row in top:
        student = users.get_by_id(row['student_id'])
        problem = problems.get_by_id(row['problem_id'])
        task_button = types.InlineKeyboardButton(
            text=f"{problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) {student.surname} {student.name}",
            callback_data=f"{CALLBACK_WRITTEN_TASK_SELECTED}_{student.id}_{problem.id}"
        )
        keyboard_markup.add(task_button)
    cancel = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=f"{CALLBACK_TEACHER_CANCEL}"
    )
    keyboard_markup.add(cancel)
    return keyboard_markup


def build_written_task_checking_verdict_keyboard(student: db_helper.User, problem: db_helper.Problem):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=7)
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚úî –ó–∞—Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})",
        callback_data=f"{CALLBACK_WRITTEN_TASK_OK}_{student.id}_{problem.id}"
    ))
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ —Å—Ç—É–¥–µ–Ω—Ç—É {student.surname} {student.name}",
        callback_data=f"{CALLBACK_WRITTEN_TASK_BAD}_{student.id}_{problem.id}"
    ))
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—é —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—Å—ë –∑–∞–±—ã—Ç—å",
        callback_data=f"{CALLBACK_TEACHER_CANCEL}_{student.id}_{problem.id}"
    ))
    return keyboard_markup


def build_student_in_conference_keyboard():
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚úî –ë–µ—Å–µ–¥–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
        callback_data=f"{CALLBACK_GET_OUT_OF_WAITLIST}"
    ))
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—Å—Ç–Ω–æ–π —Å–¥–∞—á–∏",
        callback_data=f"{CALLBACK_GET_OUT_OF_WAITLIST}"
    ))
    return keyboard_markup


async def prc_teacher_select_action(message: types.Message, teacher: db_helper.User):
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                           reply_markup=build_teacher_actions_keyboard())


async def prc_get_task_info_state(message, student: db_helper.User):
    slevel = '(—É—Ä–æ–≤–µ–Ω—å ¬´–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ¬ª)' if student.level == '–ø' else '(—É—Ä–æ–≤–µ–Ω—å ¬´–ù–∞—á–∏–Ω–∞—é—â–∏–µ¬ª)'
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë {slevel}",
        reply_markup=build_problems_keyboard(problems.last_lesson, student),
    )


async def prc_sending_solution_state(message: types.Message, student: db_helper.User):
    problem_id = states.get_by_user_id(student.id)['problem_id']
    problem = problems.get_by_id(problem_id)
    downloaded = []
    file_name = None
    text = message.text
    if text:
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
    # for photo in message.photo:
    if message.photo:
        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    if message.document:
        if message.document.file_size > 5 * 1024 * 1024:
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 5 –º–µ–≥–∞–±–∞–π—Ç")
            return
        file_id = message.document.file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    for bin_data, filename in downloaded:
        ext = filename[filename.rfind('.') + 1:]
        cur_ts = datetime.datetime.now().isoformat().replace(':', '-')
        file_name = os.path.join(SOLS_PATH,
                                 f'{student.token} {student.surname} {student.name}',
                                 f'{problem.lesson}',
                                 f'{problem.lesson}{problem.level}_{problem.prob}{problem.item}_{cur_ts}.{ext}')
        os.makedirs(os.path.dirname(file_name), exist_ok=True)
        db.add_message_to_log(False, message.message_id, message.chat.id, student.id, None, message.text, file_name)
        with open(file_name, 'wb') as file:
            file.write(bin_data.read())
    written_queue.add_to_queue(student.id, problem.id)
    written_queue.add_to_discussions(student.id, problem.id, None, text, file_name, message.chat.id, message.message_id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    )
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


async def prc_teacher_is_checking_task_state(message: types.Message, teacher: db_helper.User):
    problem_id = states.get_by_user_id(teacher.id)['problem_id']
    student_id = states.get_by_user_id(teacher.id)['last_student_id']
    written_queue.add_to_discussions(student_id, problem_id, teacher.id, message.text, None, message.chat.id, message.message_id)
    await bot.send_message(chat_id=message.chat.id, text="–û–∫, –∑–∞–ø–∏—Å–∞–ª")


async def prc_sending_test_answer_state(message: types.Message, student: db_helper.User):
    state = states.get_by_user_id(student.id)
    problem_id = state['problem_id']
    problem = problems.get_by_id(problem_id)
    student_answer = (message.text or '').strip()
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–∫–æ–π (–µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
    if problem.ans_type == ANS_TYPE_SELECT_ONE and student_answer not in problem.cor_ans.split(';'):
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(problem.ans_validation.split(';'))}")
        return
    elif problem.ans_type != ANS_TYPE_SELECT_ONE and problem.ans_validation and not re.fullmatch(problem.ans_validation,
                                                                                                 student_answer):
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå {problem.validation_error}")
        return
    correct_answer = problem.cor_ans.strip()
    if student_answer == correct_answer:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_SOLVED, student_answer)
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚úîÔ∏è {problem.congrat}")
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_WRONG_ANSWER, student_answer)
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå {problem.wrong_ans}")
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


async def prc_wait_sos_request_state(message: types.Message, student: db_helper.User):
    try:
        await bot.forward_message('@vmsh_bot_sos_channel', message.chat.id, message.message_id)
    except:
        # –ï—Å–ª–∏ –±–æ—Ç –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–æ –≤—Å—ë —É–ø–∞–¥—ë—Ç
        pass
    await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


def build_verdict_keyboard(plus_ids: set, student):
    lesson_num = problems.last_lesson
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    plus_ids_str = ','.join(map(str, plus_ids))
    for problem in problems.get_by_lesson(student.level, lesson_num):
        if problem.prob_type == PROB_TYPE_ORALLY:
            tick = '‚úÖ' if problem.id in plus_ids else ''
            task_button = types.InlineKeyboardButton(
                text=f"{tick} {problem}",
                callback_data=f"{CALLBACK_ADD_OR_REMOVE_ORAL_PLUS}_{problem.id}_{plus_ids_str}"
            )
            keyboard_markup.add(task_button)
    ready_button = types.InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ (–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–∞—á—É –∏ –≤–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω–¥—É–∏—Ç)",
        callback_data=f"{CALLBACK_FINISH_ORAL_ROUND}_{plus_ids_str}"
    )
    keyboard_markup.add(ready_button)
    return keyboard_markup


async def prc_teacher_accepted_queue(message: types.message, teacher: db_helper.User):
    state = states.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = users.get_by_id(student_id)
    await bot.send_message(chat_id=message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=build_verdict_keyboard(plus_ids=set(), student=student))


async def prc_student_is_in_conference_state(message: types.message, student: db_helper.User):
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥—ë–º callback'–∞
    pass


state_processors = {
    STATE_GET_USER_INFO: prc_get_user_info_state,
    STATE_GET_TASK_INFO: prc_get_task_info_state,
    STATE_SENDING_SOLUTION: prc_sending_solution_state,
    STATE_SENDING_TEST_ANSWER: prc_sending_test_answer_state,
    STATE_WAIT_SOS_REQUEST: prc_wait_sos_request_state,
    STATE_TEACHER_SELECT_ACTION: prc_teacher_select_action,
    STATE_TEACHER_IS_CHECKING_TASK: prc_teacher_is_checking_task_state,
    STATE_TEACHER_ACCEPTED_QUEUE: prc_teacher_accepted_queue,
    STATE_STUDENT_IS_IN_CONFERENCE: prc_student_is_in_conference_state,
}


async def process_regular_message(message: types.Message):
    user = users.get_by_chat_id(message.chat.id)
    if not user:
        cur_chat_state = STATE_GET_USER_INFO
    else:
        cur_chat_state = states.get_by_user_id(user.id)['state']

        if not message.document and not message.photo:
            db.add_message_to_log(False, message.message_id, message.chat.id, user.id, None, message.text, None)
    state_processor = state_processors.get(cur_chat_state, prc_WTF)
    await state_processor(message, user)


async def start(message: types.Message):
    user = users.get_by_chat_id(message.chat.id)
    if user:
        states.set_by_user_id(user.id, STATE_GET_USER_INFO)
    await bot.send_message(
        chat_id=message.chat.id,
        text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
    )


async def recheck(message: types.Message):
    teacher = users.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE_TEACHER:
        return
    match = re.fullmatch(r'/recheck_xd5fqk\s+(\w{6})\s+(\d+)([–∞-—è])\.(\d+)([–∞-—è]?)\s*', message.text or '')
    if not match:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´/recheck_xd5fqk token problem¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´/recheck_xd5fqk aa9bb4 3–Ω.11–∞¬ª",
        )
    else:
        token, lst, level, prob, item = match.groups()
        student = users.get_by_token(token)
        problem = problems.get_by_key(level, int(lst), int(prob), item)
        if not student:
            await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not problem:
            await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ {lst}{level}.{prob}{item} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if student and problem:
            written_queue.add_to_queue(student.id, problem.id, ts=datetime.datetime(1, 1, 1))
            await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")


async def broadcast(message: types.Message):
    teacher = users.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE_TEACHER:
        return
    text = message.text.splitlines()
    try:
        cmd, tokens, *broadcast_message = text
    except:
        return
    broadcast_message = '\n'.join(broadcast_message)
    tokens = re.split('\W+', tokens)
    if tokens == ['all_students']:
        tokens = [user.token for user in users if user.type == USER_TYPE_STUDENT]
    elif tokens == ['all_teachers']:
        tokens = [user.token for user in users if user.type == USER_TYPE_TEACHER]
    for token in tokens:
        student = users.get_by_token(token)
        if not student or not student.chat_id:
            continue
        try:
            broad_message = await bot.send_message(
                chat_id=student.chat_id,
                text=broadcast_message,
            )
            db.add_message_to_log(True, broad_message.message_id, broad_message.chat.id, student.id, None, broadcast_message, None)
        except (aiogram.utils.exceptions.ChatNotFound,
                aiogram.utils.exceptions.MessageToForwardNotFound,
                aiogram.utils.exceptions.BotBlocked,
                aiogram.utils.exceptions.ChatIdIsEmpty,) as e:
            logging.error(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è?? WTF? {student.chat_id}\n{e}')
        await asyncio.sleep(.05)  # 20 messages per second (Limit: 30 messages per second)


async def level_novice(message: types.Message):
    student = users.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        )
        student.set_level('–Ω')
        states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(message)


async def level_pro(message: types.Message):
    student = users.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        )
        student.set_level('–ø')
        states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(message)


async def sos(message: types.Message):
    user = users.get_by_chat_id(message.chat.id)
    if not user:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–µ–∑ –ø–∞—Ä–æ–ª—è —è –Ω–µ –∑–Ω–∞—é, –∫–æ–º—É –ø–æ–º–æ–≥–∞—Ç—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –¢–∞–∫, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ò —è –ø–µ—Ä–µ—à–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∏–≤–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
        )
        states.set_by_user_id(user.id, STATE_WAIT_SOS_REQUEST)


async def prc_problems_selected_callback(query: types.CallbackQuery, student: db_helper.User):
    student = users.get_by_chat_id(query.message.chat.id)
    # state = states.get_by_user_id(user.id)
    problem_id = int(query.data[2:])
    problem = problems.get_by_id(problem_id)
    if not problem:
        await bot_answer_callback_query(query.id)
        states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(query.message)
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    if problem.prob_type == PROB_TYPE_TEST:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if problem.ans_type == ANS_TYPE_SELECT_ONE:
            await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                        reply_markup=build_test_answers_keyboard(problem.ans_validation.split(';')))
        else:
            await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç{ANS_HELP_DESCRIPTIONS[problem.ans_type]}",
                                        reply_markup=build_cancel_task_submission_keyboard())
        states.set_by_user_id(student.id, STATE_SENDING_TEST_ANSWER, problem_id)
        await bot_answer_callback_query(query.id)
    elif problem.prob_type == PROB_TYPE_WRITTEN:
        await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç üìà –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.",
                                    reply_markup=build_cancel_task_submission_keyboard())
        states.set_by_user_id(student.id, STATE_SENDING_SOLUTION, problem_id)
        await bot_answer_callback_query(query.id)
    elif problem.prob_type == PROB_TYPE_ORALLY:
        # await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
        #                             text=f"–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞. –ï—ë –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ 17:00 –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ. –î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É. –ö–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –≥–æ—Ç–æ–≤–æ, –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: 834 3300 5508, –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: 179179. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å: –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –≤–∞—Å –ø—É—Å—Ç—è—Ç –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ö–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞, —ç—Ç–æ—Ç –ø—É—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è —Å—Ä–∞–∑—É –Ω–∞ –ø–µ—Ä–≤—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö.",
        #                             disable_web_page_preview=True)
        # states.set_by_user_id(user.id, STATE_GET_TASK_INFO)
        # await bot_answer_callback_query(query.id)
        # await asyncio.sleep(1)
        # await process_regular_message(query.message)
        state = states.get_by_user_id(student.id)
        if state['oral_problem_id'] is not None:
            await bot.send_message(chat_id=query.message.chat.id,
                                   text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\. –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\. –¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\.",
                                   parse_mode="MarkdownV2")
            await bot_answer_callback_query(query.id)
        else:
            try:
                await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
            except:
                pass
            waitlist.enter(student.id, problem.id)
            await bot.send_message(chat_id=query.message.chat.id,
                                   text="–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞–∂–º–∏—Ç–µ `/exit_waitlist`",
                                   parse_mode="MarkdownV2",
                                   reply_markup=build_exit_waitlist_keyboard())
            await bot_answer_callback_query(query.id)
            await asyncio.sleep(4)
            await process_regular_message(query.message)


async def prc_list_selected_callback(query: types.CallbackQuery, student: db_helper.User):
    list_num = int(query.data[2:])
    student = users.get_by_chat_id(query.message.chat.id)
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
                                reply_markup=build_problems_keyboard(list_num, student))
    await bot_answer_callback_query(query.id)


async def prc_show_list_of_lists_callback(query: types.CallbackQuery, student: db_helper.User):
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤:",
                                reply_markup=build_lessons_keyboard())
    await bot_answer_callback_query(query.id)


async def prc_one_of_test_answer_selected_callback(query: types.CallbackQuery, student: db_helper.User):
    state = states.get_by_user_id(student.id)
    if state.get('state', None) != STATE_SENDING_TEST_ANSWER:
        logging.info('WRONG STATE', state, STATE_SENDING_TEST_ANSWER, 'STATE_SENDING_TEST_ANSWER')
        return
    selected_answer = query.data[2:]
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    await bot.send_message(chat_id=query.message.chat.id, text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    state = states.get_by_user_id(student.id)
    problem_id = state['problem_id']
    problem = problems.get_by_id(problem_id)
    if problem is None:
        logging.error('–°–ª–æ–º–∞–ª—Å—è –ø—Ä–∏—ë–º –∑–∞–¥–∞—á :(')
        states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await bot_answer_callback_query(query.id)
        await asyncio.sleep(1)
        await process_regular_message(query.message)
        return
    correct_answer = problem.cor_ans
    # await bot.send_message(chat_id=query.message.chat.id,
    #                        text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    if selected_answer == correct_answer:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_SOLVED, selected_answer)
        await bot.send_message(chat_id=query.message.chat.id,
                               text=f"‚úîÔ∏è {problem.congrat}")
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_WRONG_ANSWER, selected_answer)
        await bot.send_message(chat_id=query.message.chat.id,
                               text=f"‚ùå {problem.wrong_ans}")
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await bot_answer_callback_query(query.id)
    await asyncio.sleep(1)
    await process_regular_message(query.message)


async def prc_cancel_task_submission_callback(query: types.CallbackQuery, student: db_helper.User):
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    # await bot.send_message(
    #     chat_id=message.chat.id,
    #     text="‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë",
    #     reply_markup=build_problems_keyboard(problems.last_lesson, user),
    # )
    await bot_edit_message_text(message_id=query.message.message_id, chat_id=query.message.chat.id,
                                text="‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë",
                                reply_markup=build_problems_keyboard(problems.last_lesson, student))
    await bot_answer_callback_query(query.id)


async def prc_get_written_task_callback(query: types.CallbackQuery, teacher: db_helper.User):
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    top = written_queue.take_top()
    if not top:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í—Å–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
        await bot_answer_callback_query(query.id)
        await process_regular_message(query.message)
    else:
        # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É 10 —Ç–æ–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –≤—ã–±–æ—Ä
        await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                               reply_markup=build_teacher_select_written_problem_keyboard(top))
        # build_teacher_actions_keyboard


async def prc_teacher_cancel_callback(query: types.CallbackQuery, teacher: db_helper.User):
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def prc_written_task_selected_callback(query: types.CallbackQuery, teacher: db_helper.User):
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    chat_id = query.message.chat.id
    _, student_id, problem_id = query.data.split('_')
    student = users.get_by_id(int(student_id))
    problem = problems.get_by_id(int(problem_id))
    await bot_answer_callback_query(query.id)
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    is_unlocked = written_queue.mark_being_checked(student.id, problem.id)
    if not is_unlocked:
        await bot.send_message(chat_id=chat_id, text='–≠—Ç—É –∑–∞–¥–∞—á—É —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å.')
        states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
        await process_regular_message(query.message)
        return
    await bot_edit_message_text(chat_id=chat_id, message_id=query.message.message_id,
                                text=f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})\n"
                                     f"–®–∫–æ–ª—å–Ω–∏–∫ {student.token} {student.surname} {student.name}"
                                     f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                reply_markup=None)
    discussion = written_queue.get_discussion(student.id, problem.id)
    for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        forward_success = False
        if row['chat_id'] and row['tg_msg_id']:
            try:
                await bot.forward_message(chat_id, row['chat_id'], row['tg_msg_id'])
                forward_success = True
            except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.MessageToForwardNotFound):
                await bot.send_message(chat_id=chat_id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ...')
        if forward_success:
            pass
        elif row['text']:
            await bot.send_message(chat_id=chat_id, text=row['text'])
        elif row['attach_path']:
            # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
            path = row['attach_path'].replace('/web/vmsh179bot/vmsh179bot/', '')
            input_file = types.input_file.InputFile(path)
            await bot.send_photo(chat_id=chat_id, photo=input_file)
    states.set_by_user_id(teacher.id, STATE_TEACHER_IS_CHECKING_TASK, problem.id, last_teacher_id=teacher.id, last_student_id=student.id)
    await bot.send_message(chat_id=chat_id,
                           text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n'
                                '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏ –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª—é—Å)',
                           reply_markup=build_written_task_checking_verdict_keyboard(student, problem))


async def prc_written_task_ok_callback(query: types.CallbackQuery, teacher: db_helper.User):
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = users.get_by_id(int(student_id))
    problem = problems.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_SOLVED, None)
    written_queue.delete_from_queue(student.id, problem.id)
    await bot_answer_callback_query(query.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'‚úî –û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}!')
    states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    student_chat_id = users.get_by_id(student.id).chat_id
    try:
        discussion = written_queue.get_discussion(student.id, problem.id)
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∞
        last_pup_post = max([rn for rn in range(len(discussion)) if discussion[rn]['teacher_id'] is None] + [-2])
        teacher_comments = discussion[last_pup_post + 1:]
        if not teacher_comments:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!",
                                   disable_notification=True)
        else:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!\n"
                                        f"–í–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                                        f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                   disable_notification=True)
            for row in teacher_comments:
                # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
                if row['chat_id'] and row['tg_msg_id']:
                    await bot.forward_message(student_chat_id, row['chat_id'], row['tg_msg_id'], disable_notification=True)
                elif row['text']:
                    await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
                elif row['attach_path']:
                    # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                    input_file = types.input_file.InputFile(row['attach_path'])
                    await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
            await bot.send_message(chat_id=student_chat_id,
                                   text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                                   disable_notification=True)
    except (aiogram.utils.exceptions.ChatNotFound,
            aiogram.utils.exceptions.MessageToForwardNotFound,
            aiogram.utils.exceptions.BotBlocked,
            aiogram.utils.exceptions.ChatIdIsEmpty,) as e:
        logging.error(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è?? WTF? {student_chat_id}\n{e}')
    await process_regular_message(query.message)


async def prc_written_task_bad_callback(query: types.CallbackQuery, teacher: db_helper.User):
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = users.get_by_id(int(student_id))
    problem = problems.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_WRONG_ANSWER, None)
    written_queue.delete_from_queue(student.id, problem.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'‚ùå –≠—Ö, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –º–∏–Ω—É—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}!')

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —à–∫–æ–ª—å–Ω–∏–∫—É
    student_chat_id = users.get_by_id(student.id).chat_id
    try:
        discussion = written_queue.get_discussion(student.id, problem.id)
        await bot.send_message(chat_id=student_chat_id,
                               text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:\n"
                                    f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
                                    f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                               disable_notification=True)
        for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
            # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            if row['chat_id'] and row['tg_msg_id']:
                await bot.forward_message(student_chat_id, row['chat_id'], row['tg_msg_id'], disable_notification=True)
            elif row['text']:
                await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
            elif row['attach_path']:
                # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                input_file = types.input_file.InputFile(row['attach_path'])
                await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
        await bot.send_message(chat_id=student_chat_id,
                               text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                               disable_notification=True)
    except (aiogram.utils.exceptions.ChatNotFound,
            aiogram.utils.exceptions.MessageToForwardNotFound,
            aiogram.utils.exceptions.BotBlocked,
            aiogram.utils.exceptions.ChatIdIsEmpty,) as e:
        logging.error(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è?? WTF? {student_chat_id}\n{e}')
    states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def prc_get_queue_top_callback(query: types.CallbackQuery, teacher: db_helper.User):
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    top = waitlist.top(1)
    if not top:
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ, —Ç–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º.
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        await bot_answer_callback_query(query.id)
        await prc_teacher_select_action(query.message, teacher)
        return

    student = users.get_by_id(top[0]['student_id'])
    problem = problems.get_by_id(top[0]['problem_id'])
    states.set_by_user_id(teacher.id, STATE_TEACHER_ACCEPTED_QUEUE, oral_problem_id=problem.id, last_student_id=student.id)
    waitlist.leave(student.id)

    params = {
        'studentId': student.id,
        'teacherId': teacher.id,
        'problemId': problem.id,
        'displayName': f"{student.name} {student.surname}"
    }
    student_link = WHITEBOARD_LINK.format(urlencode(params))
    params['displayName'] = f"{teacher.name} {teacher.middlename} {teacher.surname}"
    teacher_link = WHITEBOARD_LINK.format(urlencode(params))
    # –í–æ–æ–±—â–µ —à–∫–æ–ª—å–Ω–∏–∫ –º–æ–≥ —É—Å–ø–µ—Ç—å –ø—Ä–æ–≥–Ω–∞—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–º—É –ø–∏—Å–∞—Ç—å
    try:
        await bot.send_message(chat_id=student.chat_id,
                               text=f"<b>–î–æ –≤–∞—Å –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å</b> –Ω–∞ —Å–¥–∞—á—É –∑–∞–¥–∞—á–∏\n{problem}\n"
                                    f"<b><a href=\"{student_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>.",
                               reply_markup=types.ReplyKeyboardRemove(),
                               parse_mode='HTML')
        states.set_by_user_id(student.id, STATE_STUDENT_IS_IN_CONFERENCE, oral_problem_id=problem.id, last_teacher_id=teacher.id)
        await bot.send_message(chat_id=student.chat_id, text="–ù–∞–∂–º–∏—Ç–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é.",
                               reply_markup=build_student_in_conference_keyboard(),
                               parse_mode='HTML')
    except (aiogram.utils.exceptions.ChatNotFound,
            aiogram.utils.exceptions.MessageToForwardNotFound,
            aiogram.utils.exceptions.BotBlocked,
            aiogram.utils.exceptions.ChatIdIsEmpty,) as e:
        logging.error(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è?? WTF? {student.chat_id}\n{e}')
        # –°–Ω–∏–º–∞–µ–º —Å–æ —à–∫–æ–ª—å–Ω–∏–∫–∞ —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏
        states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    else:
        await bot_answer_callback_query(query.id, show_alert=True)
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"<b>–í–∞—à —É—á–µ–Ω–∏–∫: {student}.\n"
                                    f"{problem}.\n"
                                    f"<a href=\"{teacher_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>",
                               parse_mode='HTML')
    await bot_answer_callback_query(query.id)
    await process_regular_message(message=query.message)


async def prc_set_verdict_callback(query: types.CallbackQuery, teacher: db_helper.User):
    state = states.get_by_user_id(teacher.id)
    problem_id = state['oral_problem_id']
    # TODO !!!
    if problem_id is None:
        logging.info("WAT problem_id is None")
        return
    problem = problems.get_by_id(problem_id)
    verdict = int(query.data.split('_')[1])
    student_id = state['last_student_id']
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    await bot_answer_callback_query(query.id)
    states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    db.add_result(student_id, problem_id, problem.level, problem.lesson, teacher.id, verdict, '')
    await process_regular_message(query.message)


async def prc_get_out_of_waitlist_callback(query: types.CallbackQuery, student: db_helper.User):
    state = states.get_by_user_id(student.id)
    teacher = users.get_by_id(state['last_teacher_id'])
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    waitlist.leave(student.id)
    states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    if teacher:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–£—á–µ–Ω–∏–∫ {student.surname} {student.name} {student.token} –∑–∞–≤–µ—Ä—à–∏–ª —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É.\n")
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def prc_add_or_remove_oral_plus_callback(query: types.CallbackQuery, teacher: db_helper.User):
    _, problem_id, selected_ids = query.data.split('_')
    problem_id = int(problem_id)
    selected_ids = set() if not selected_ids else {int(prb_id) for prb_id in selected_ids.split(',')}
    selected_ids.symmetric_difference_update({problem_id})
    state = states.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = users.get_by_id(student_id)
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=build_verdict_keyboard(plus_ids=selected_ids, student=student))
    await bot_answer_callback_query(query.id)


async def prc_finish_oral_round_callback(query: types.CallbackQuery, teacher: db_helper.User):
    _, selected_ids = query.data.split('_')
    selected_ids = set() if not selected_ids else {int(prb_id) for prb_id in selected_ids.split(',')}
    state = states.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = users.get_by_id(student_id)
    pluses = [problems.get_by_id(prb_id) for prb_id in selected_ids]
    human_readable_pluses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in pluses]
    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª—é—Å–∏–∫–∏
    for problem in pluses:
        db.add_result(student_id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_SOLVED, None)
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=f"–®–∫–æ–ª—å–Ω–∏–∫: {student.token} {student.surname} {student.name}\n"
                                     f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–ª—é—Å—ã –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}",
                                reply_markup=None)
    try:
        student_state = states.get_by_user_id(student.id)
        student_message = await bot.send_message(chat_id=student.chat_id,
                                                 text=f"–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –≤–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫–∏ –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}",
                                                 disable_notification=True)
        if student_state['state'] == STATE_STUDENT_IS_IN_CONFERENCE:
            states.set_by_user_id(student.id, STATE_GET_TASK_INFO)
            await process_regular_message(student_message)
    except (aiogram.utils.exceptions.ChatNotFound,
            aiogram.utils.exceptions.MessageToForwardNotFound,
            aiogram.utils.exceptions.BotBlocked,
            aiogram.utils.exceptions.ChatIdIsEmpty,) as e:
        logging.error(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è?? WTF? {student.chat_id}\n{e}')
    await bot_answer_callback_query(query.id)
    states.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await process_regular_message(query.message)


callbacks_processors = {
    CALLBACK_PROBLEM_SELECTED: prc_problems_selected_callback,
    CALLBACK_SHOW_LIST_OF_LISTS: prc_show_list_of_lists_callback,
    CALLBACK_LIST_SELECTED: prc_list_selected_callback,
    CALLBACK_ONE_OF_TEST_ANSWER_SELECTED: prc_one_of_test_answer_selected_callback,
    CALLBACK_GET_QUEUE_TOP: prc_get_queue_top_callback,
    CALLBACK_SET_VERDICT: prc_set_verdict_callback,
    CALLBACK_CANCEL_TASK_SUBMISSION: prc_cancel_task_submission_callback,
    CALLBACK_GET_WRITTEN_TASK: prc_get_written_task_callback,
    CALLBACK_TEACHER_CANCEL: prc_teacher_cancel_callback,
    CALLBACK_WRITTEN_TASK_SELECTED: prc_written_task_selected_callback,
    CALLBACK_WRITTEN_TASK_OK: prc_written_task_ok_callback,
    CALLBACK_WRITTEN_TASK_BAD: prc_written_task_bad_callback,
    CALLBACK_GET_OUT_OF_WAITLIST: prc_get_out_of_waitlist_callback,
    CALLBACK_ADD_OR_REMOVE_ORAL_PLUS: prc_add_or_remove_oral_plus_callback,
    CALLBACK_FINISH_ORAL_ROUND: prc_finish_oral_round_callback,
}


async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    if query.message:
        user = users.get_by_chat_id(query.message.chat.id)
        if not user:
            try:
                await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                                    reply_markup=None)
            except:
                pass  # –û—à–∏–±–∫–∏ –∑–¥–µ—Å—å –Ω–µ –≤–∞–∂–Ω—ã
            await start(query.message)
            return
        callback_type = query.data[0]
        callback_processor = callbacks_processors.get(callback_type, None)
        await callback_processor(query, user)


async def check_webhook():
    # Set webhook
    webhook = await bot.get_webhook_info()  # Get current webhook status
    if webhook.url != WEBHOOK_URL:  # If URL is bad
        if not webhook.url:  # If URL doesnt match current - remove webhook
            await bot.delete_webhook()
        await bot.set_webhook(WEBHOOK_URL)  # Set new URL for webhook


async def exit_waitlist(message: types.Message):
    user = users.get_by_chat_id(message.chat.id)
    waitlist.leave(user.id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await process_regular_message(message)


async def on_startup(app):
    logging.warning('Start up!')
    if USE_WEBHOOKS:
        await check_webhook()
    dispatcher.register_message_handler(start, commands=['start'])
    dispatcher.register_message_handler(sos, commands=['sos'])
    dispatcher.register_message_handler(broadcast, commands=['broadcast_wibkn96x'])
    dispatcher.register_message_handler(recheck, commands=['recheck_xd5fqk'])
    dispatcher.register_message_handler(update_all_internal_data, commands=['update_all_quaLtzPE'])
    dispatcher.register_message_handler(exit_waitlist, commands=['exit_waitlist'])
    dispatcher.register_message_handler(level_novice, commands=['level_novice'])
    dispatcher.register_message_handler(level_pro, commands=['level_pro'])
    dispatcher.register_message_handler(process_regular_message, content_types=["photo", "document", "text"])
    dispatcher.register_callback_query_handler(inline_kb_answer_callback_handler)


async def on_shutdown(app):
    """
    Graceful shutdown. This method is recommended by aiohttp docs.
    """
    logging.warning('Shutting down..')
    # Remove webhook.
    await bot.delete_webhook()
    # Close all connections.
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()
    db.disconnect()
    logging.warning('Bye!')


# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ gunicorn'–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏ –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –µ–≥–æ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é
# –ê –≤–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤
if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    start_polling(dispatcher, on_startup=on_startup, on_shutdown=on_shutdown)
else:
    USE_WEBHOOKS = True
    WEBHOOK_URL = "https://{}:{}/{}/".format(WEBHOOK_HOST, WEBHOOK_PORT, API_TOKEN)
    # Create app
    app = web.Application()
    configure_app(dispatcher, app, path='/{token}/', route_name='telegram_webhook_handler')
    # Setup event handlers.
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # app will be started by gunicorn
