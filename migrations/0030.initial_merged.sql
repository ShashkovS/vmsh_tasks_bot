-- –î–ª—è key-value storage
create table IF NOT EXISTS kv
(
    key   text unique,
    value text
);

------------------------------------------
-- –°—Ç—É–¥–µ–Ω—Ç—ã, —É—á–∏—Ç–µ–ª—è –∏ —Ç.–ø., –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
------------------------------------------

-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å—Ç—É–¥–µ–Ω—Ç—ã, —É—á–∏—Ç–µ–ª—è, –∞–¥–º–∏–Ω—ã
create table IF NOT EXISTS users
(
    id         INTEGER primary key,
    chat_id    INTEGER unique,
    type       INTEGER not null,
    level      TEXT,
    name       TEXT    not null,
    surname    TEXT    not null,
    middlename TEXT,
    token      TEXT unique,
    online     INTEGER,
    grade      int,
    birthday   int
);

-- –°–∏–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
create table IF NOT EXISTS student_strength
(
    student_id  integer not null primary key,
    simple_prob DOUBLE  not null,
    compl_prob  DOUBLE  not null
);


-- –§–∞–∫—Ç—ã –ª–æ–≥–∏–Ω–∞ –∏ –¥–æ–ø.–∞—Ç—Ä–∏–±—É—Ç—ã
create table IF NOT EXISTS signons
(
    ts         timestamp not null,
    user_id    INTEGER references users,
    chat_id    INTEGER   not null,
    first_name TEXT,
    last_name  TEXT,
    username   TEXT,
    token      text
);

-- –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è, —Ä–µ–∂–∏–º–∞ –∏ —Ç.–ø.
create table IF NOT EXISTS user_changes_log
(
    ts          timestamp not null,
    user_id     INTEGER   not null references users,
    change_type text      not null,
    new_value   text      not null
);

-- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
create table IF NOT EXISTS states
(
    user_id         INTEGER primary key unique references users,
    state           INTEGER,
    problem_id      INTEGER references problems,
    last_student_id INTEGER references users,
    last_teacher_id INTEGER references users,
    oral_problem_id INTEGER references users,
    info            blob default null
);

-- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
create table IF NOT EXISTS last_keyboards
(
    user_id   INTEGER not null primary key references users,
    chat_id   INTEGER not null,
    tg_msg_id INTEGER not null
);


-- –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
create table IF NOT EXISTS messages_log
(
    id          INTEGER primary key unique,
    from_bot    boolean   not null,
    tg_msg_id   INTEGER   not null,
    chat_id     INTEGER   not null,
    student_id  INTEGER references users,
    teacher_id  INTEGER references users,
    ts          timestamp not null,
    msg_text    TEXT,
    attach_path TEXT
);


------------------------------------------
-- –ó–∞–¥–∞—á–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–∏—Å—å–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
------------------------------------------

-- –ó–∞–¥–∞—á–∏
create table IF NOT EXISTS problems
(
    id               INTEGER primary key,
    level            TEXT            not null,
    lesson           INTEGER         not null,
    prob             INTEGER         not null,
    item             TEXT            not null,
    title            text            not null,
    prob_text        text            not null,
    prob_type        integer         not null,
    ans_type         integer,
    ans_validation   text,
    validation_error text,
    cor_ans          text,
    cor_ans_checker  text,
    wrong_ans        text,
    congrat          text,
    synonyms         text default '' not null,
    unique (level, lesson, prob, item)
);
create index IF NOT EXISTS problems_by_synonyms
    on problems (synonyms);

-- –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á
create table IF NOT EXISTS problem_complexity
(
    synonyms   TEXT   not null primary key,
    for_weak   DOUBLE not null,
    for_strong DOUBLE not null
);

-- –£—Ä–æ–∫–∏
create table IF NOT EXISTS lessons
(
    id     INTEGER primary key,
    level  TEXT    not null,
    lesson INTEGER not null,
    unique (lesson, level)
);


-- ¬´–°–µ–∞–Ω—Å—ã¬ª —É—Å—Ç–Ω–æ–π —Å–¥–∞—á–∏
create table IF NOT EXISTS zoom_conversation
(
    id                   INTEGER primary key,
    ts                   TEXT    not null,
    student_id           INTEGER not null references users,
    teacher_id           INTEGER not null references users,
    level                TEXT    not null,
    lesson               INTEGER not null,
    check_time_spent_sec INTEGER
);

-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
create table IF NOT EXISTS results
(
    id                   INTEGER primary key,
    student_id           INTEGER   not null references users,
    problem_id           INTEGER   not null references problems,
    level                TEXT      not null,
    lesson               INTEGER   not null,
    teacher_id           INTEGER references users,
    ts                   timestamp not null,
    verdict              integer   not null,
    answer               TEXT,
    res_type             integer,
    check_time_spent_sec int default null,
    zoom_conversation_id INT references zoom_conversation
);

create index IF NOT EXISTS results_by_student_problem
    on results (student_id, problem_id);

create index IF NOT EXISTS results_by_student_solved
    on results (student_id, level, lesson)
    where verdict > 0;


-- –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ –ø–∏—Å—å–º–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º
create table IF NOT EXISTS written_tasks_discussions
(
    id          INTEGER primary key unique,
    ts          timestamp not null,
    student_id  INTEGER   not null references users,
    problem_id  INTEGER   not null references problems,
    teacher_id  INTEGER references users,
    text        TEXT,
    attach_path TEXT,
    chat_id     INTEGER,
    tg_msg_id   INTEGER
);
create index IF NOT EXISTS written_tasks_discussions_by_task
    on written_tasks_discussions (student_id, problem_id, ts);

-- –û—á–µ—Ä–µ–¥—å –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
create table IF NOT EXISTS written_tasks_queue
(
    id         INTEGER primary key unique,
    ts         timestamp not null,
    student_id INTEGER   not null references users,
    problem_id INTEGER   not null references problems,
    cur_status INTEGER   not null,
    teacher_ts TIMESTAMP,
    teacher_id TIMESTAMP references users,
    unique (student_id, problem_id)
);
create index IF NOT EXISTS written_tasks_queue_by_tst
    on written_tasks_queue (ts desc);

-- –ü—Ä–∏–≤—è–∑–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –∫ –∑–∞–¥–∞—á–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π-–≥–∞–ª–µ—Ä–µ–π
create table IF NOT EXISTS media_groups
(
    media_group_id INTEGER   not null primary key unique,
    problem_id     INTEGER   not null references problems,
    ts             timestamp not null
);


------------------------------------------
-- –†–µ–∞–∫—Ü–∏–∏
------------------------------------------

-- –¢–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π ()
create table IF NOT EXISTS reaction_type_enum
(
    reaction_type_id INTEGER primary key,
    reaction_type    TEXT not null unique
);
delete
from reaction_type_enum
where 1 = 1;
INSERT INTO reaction_type_enum
VALUES (0, '–ü–∏—Å—å–º–µ–Ω–Ω–æ, —É—á–µ–Ω–∏–∫'),
       (100, '–ü–∏—Å—å–º–µ–Ω–Ω–æ, —É—á–∏—Ç–µ–ª—å'),
       (200, '–£—Å—Ç–Ω–æ, —É—á–µ–Ω–∏–∫'),
       (300, '–£—Å—Ç–Ω–æ, —É—á–∏—Ç–µ–ª—å');

-- –°–∞–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
create table IF NOT EXISTS reaction_enum
(
    reaction_id      INTEGER primary key,
    reaction         TEXT    not null,
    reaction_type_id INTEGER not null references reaction_type_enum
);
delete
from reaction_enum
where 1 = 1;
INSERT INTO reaction_enum
    -- —Ä–µ–∞–∫—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω—É—é —Å–¥–∞—á—É
VALUES (0, 'üëå –û–∫. –í—Å—ë —è—Å–Ω–æ.', 0),
       (1, 'üòï –ù–µ–ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –Ω–µ —Ç–∞–∫...', 0),
       (2, 'üôã –ù–µ –º–æ–≥—É —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π!', 0),

       -- —Ä–µ–∞–∫—Ü–∏—è —É—á–∏—Ç–µ–ª—è –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω—É—é —Å–¥–∞—á—É
       (100, 'üî• –°—É–ø–µ—Ä—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ.', 100),
       (101, 'üòï –ñ—É—Ç–∫–∞—è –º—É—Ç—å.', 100),
       (102, 'üò† –†–µ—à–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–ø–∏—Å–∞–Ω–æ.', 100),

       -- —Ä–µ–∞–∫—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É
       (200, 'üëå –° —É—Å—Ç–Ω—ã–º –ø—Ä–∏—ë–º–æ–º –≤—Å—ë –û–ö.', 200),
       (201, 'üòÄ –°–¥–∞–≤–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!', 200),
       (202, 'üì° –°–≤—è–∑—å –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å.', 200),
       (203, 'üò∞ –°–¥–∞–≤–∞—Ç—å –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å...', 200),
       (204, '‚åõ –≠—Ç–æ —Å—Ç–∞—Ä—ã–µ –ø–ª—é—Å–∏–∫–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏...', 200),

       -- —Ä–µ–∞–∫—Ü–∏—è —É—á–∏—Ç–µ–ª—è –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É
       (300, 'üëç –í–Ω—è—Ç–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ.', 300),
       (301, 'üëé –ú—É—Ç–Ω–æ, –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫.', 300),
       (302, 'üò† –†–µ—à–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.', 300),
       (303, 'üì° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.', 300)
;

DROP VIEW IF EXISTS reaction_enum_view;
CREATE VIEW reaction_enum_view AS
SELECT *
FROM reaction_enum
         JOIN reaction_type_enum USING (reaction_type_id);

-- –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∏ —É—á–∏—Ç–µ–ª–µ–π)
create table IF NOT EXISTS reactions
(
    id                   INTEGER primary key,
    ts                   TEXT,
    result_id            INT references results,
    zoom_conversation_id INT references zoom_conversation,
    reaction_id          INT not null references reaction_enum,
    reaction_type_id     INT not null references reaction_type_enum
);

DROP VIEW IF EXISTS reaction_view;
CREATE VIEW reaction_view AS
SELECT rct.ts,
       reaction_type,
       problem_id,
       result_id,
       stud.name || ' ' || stud.surname || ' ' || stud.middlename    AS student_name,
       reaction_enum.reaction,
       teach.name || ' ' || teach.surname || ' ' || teach.middlename AS teacher_name,
       coalesce(r.lesson, zc.lesson)                                 as lesson,
       coalesce(r.level, zc.level)                                   as level,
       verdict,
       coalesce(r.check_time_spent_sec, zc.check_time_spent_sec)     as check_time_spent_sec
FROM reactions rct
         JOIN reaction_enum USING (reaction_id)
         JOIN reaction_type_enum USING (reaction_type_id)
         LEFT JOIN results r ON rct.result_id = r.id
         LEFT JOIN zoom_conversation zc on rct.zoom_conversation_id = zc.id
         LEFT JOIN users AS stud ON (stud.id = coalesce(r.student_id, zc.student_id))
         LEFT JOIN users AS teach ON (teach.id = coalesce(r.teacher_id, zc.teacher_id))
;


------------------------------------------
-- –î–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
------------------------------------------

create table IF NOT EXISTS webtokens
(
    user_id  INTEGER primary key unique references users,
    webtoken TEXT not null unique
);



------------------------------------------
-- –ò–≥—Ä–∞
------------------------------------------

-- –ö–æ–º–∞–Ω–¥–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
create table IF NOT EXISTS game_students_commands
(
    id         INTEGER primary key,
    student_id INTEGER not null unique references users,
    command_id INTEGER not null,
    level      text    not null
);

-- –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
create table IF NOT EXISTS game_map_opened_cells
(
    id         INTEGER primary key,
    command_id INTEGER not null,
    x          INTEGER not null,
    y          INTEGER not null,
    unique (command_id, x, y)
);

-- –û—Ç–∫—Ä—ã—Ç—ã–µ —Å—É–Ω–¥—É–∫–∏
create table IF NOT EXISTS game_map_chests
(
    id         INTEGER primary key,
    ts         timestamp not null,
    student_id INTEGER   not null references users,
    command_id INTEGER   not null,
    x          INTEGER   not null,
    y          INTEGER   not null,
    bonus      INTEGER   not null,
    unique (student_id, command_id, x, y)
);

-- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
create table IF NOT EXISTS game_map_flags
(
    id         INTEGER primary key,
    student_id INTEGER not null references users,
    command_id INTEGER not null,
    x          INTEGER not null,
    y          INTEGER not null,
    unique (student_id, command_id)
);

-- –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã
create table IF NOT EXISTS game_payments
(
    id         INTEGER primary key,
    ts         timestamp not null,
    student_id INTEGER   not null references users,
    amount     INTEGER   not null,
    cell_id    INTEGER   not null references game_map_opened_cells
);



------------------------------------------
-- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å zoom'–æ–º
------------------------------------------

create table IF NOT EXISTS zoom_events
(
    id                 INTEGER primary key,
    event_ts           TIMESTAMP not null,
    event              TEXT      not null,
    zoom_user_name     TEXT,
    zoom_user_id       INTEGER,
    breakout_room_uuid TEXT,
    user_id            INTEGER references users
);

create table IF NOT EXISTS zoom_queue
(
    zoom_user_name TEXT      not null primary key unique,
    enter_ts       timestamp not null,
    status         INTEGER   not null
);

create index IF NOT EXISTS zoom_queue_by_ts
    on zoom_queue (enter_ts);

create table IF NOT EXISTS waitlist
(
    id         INTEGER primary key unique,
    student_id INTEGER   not null unique references users,
    entered    timestamp not null,
    problem_id INTEGER   not null references problems
);

create index IF NOT EXISTS waitlist_by_student
    on waitlist (student_id);
