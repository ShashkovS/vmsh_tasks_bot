from aiogram import types

from helpers.consts import *
from helpers.config import logger
from helpers.obj_classes import User, Problem, State, db


def build_problems(lesson_num: int, student: User):
    logger.debug('keyboards.build_problems')
    solved = db.check_student_solved(student.id, student.level, lesson_num)
    being_checked = db.check_student_sent_written(student.id, lesson_num)
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for problem in Problem.get_by_lesson(student.level, lesson_num):
        if problem.id in solved:
            tick = '‚úÖ'
        elif problem.id in being_checked:
            tick = '‚ùì'
        elif problem.prob_type == PROB_TYPE.ORALLY and State.get_by_user_id(student.id)['oral_problem_id'] is not None:
            tick = '‚åõ'
        else:
            tick = '‚¨ú'
        if problem.prob_type == PROB_TYPE.TEST:
            tp = '‚ãØ'
        elif problem.prob_type == PROB_TYPE.WRITTEN or problem.prob_type == PROB_TYPE.WRITTEN_BEFORE_ORALLY:
            tp = 'üñä'
        elif problem.prob_type == PROB_TYPE.ORALLY:
            tp = 'üó£'
        else:
            tp = '?'
        task_button = types.InlineKeyboardButton(
            text=f"{tick} {tp} {problem}",
            callback_data=f"{CALLBACK.PROBLEM_SELECTED}_{problem.id}"
        )
        keyboard_markup.add(task_button)
    # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É —Ñ–∏—á—É
    # to_lessons_button = types.InlineKeyboardButton(
    #     text="–ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤",
    #     callback_data=f"{Callback.SHOW_LIST_OF_LISTS}"
    # )
    # keyboard_markup.add(to_lessons_button)
    return keyboard_markup


def build_lessons():
    logger.debug('keyboards.build_lessons')
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    logger.error('–ó–¥–µ—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ level')
    # TODO add level
    # for lesson in problems.all_lessons:
    #     lesson_button = types.InlineKeyboardButton(
    #         text=f"–õ–∏—Å—Ç–æ–∫ {lesson}",
    #         callback_data=f"{Callback.LIST_SELECTED}_{lesson}",
    #     )
    #     keyboard_markup.add(lesson_button)
    return keyboard_markup


def build_test_answers(problem: Problem):
    logger.debug('keyboards.build_test_answers')
    choices = problem.ans_validation.split(';')
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for choice in choices:
        lesson_button = types.InlineKeyboardButton(
            text=choice,
            callback_data=f"{CALLBACK.ONE_OF_TEST_ANSWER_SELECTED}_{problem.id}_{choice[:24]}",  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ callback_data ‚Äî 65 –±–∞–π—Ç.
        )
        keyboard_markup.add(lesson_button)
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK.CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_cancel_task_submission():
    logger.debug('keyboards.build_cancel_task_submission')
    keyboard_markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK.CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_exit_waitlist():
    logger.debug('keyboards.build_exit_waitlist')
    keyboard_markup = types.ReplyKeyboardMarkup(selective=True, resize_keyboard=True)
    exit_button = types.KeyboardButton(
        text="/exit_waitlist –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
    )
    keyboard_markup.add(exit_button)
    return keyboard_markup
