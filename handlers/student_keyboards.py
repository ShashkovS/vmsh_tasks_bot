from aiogram import types

from helpers.consts import *
from helpers.config import logger
from helpers.obj_classes import User, Problem, State, db, Webtoken


def build_problems(lesson_num: int, student: User, is_sos_question=False):
    logger.debug('keyboards.build_problems')
    solved = set(db.check_student_solved(student.id, lesson_num))
    being_checked = set(db.check_student_sent_written(student.id, lesson_num))
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    to_lessons_button = types.InlineKeyboardButton(
        text="üïπüé≤ –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É üéâüèÜ",
        url=f'https://vmsh179bot3.proj179.ru/game/webtoken/{Webtoken.webtoken_by_user(student)}'
    )
    keyboard_markup.add(to_lessons_button)
    # –ö–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    if not is_sos_question:
        que1 = types.InlineKeyboardButton(
            text=f"–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞—á–µ",
            callback_data=CALLBACK.PROBLEM_SOS
        )
        que2 = types.InlineKeyboardButton(
            text=f"–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å",
            callback_data=CALLBACK.OTHER_SOS
        )
        keyboard_markup.row(que1, que2)
    for problem in Problem.get_by_lesson(student.level, lesson_num):
        synonyms_set = problem.synonyms_set()
        if synonyms_set & solved:
            tick = '‚úÖ'
        elif synonyms_set & being_checked:
            tick = '‚ùì'
        elif problem.prob_type == PROB_TYPE.ORALLY and State.get_by_user_id(student.id)['oral_problem_id'] is not None:
            tick = '‚åõ'
        else:
            tick = '‚¨ú'
        if problem.prob_type == PROB_TYPE.TEST:
            tp = '‚ãØ'
        elif problem.prob_type == PROB_TYPE.WRITTEN or problem.prob_type == PROB_TYPE.WRITTEN_BEFORE_ORALLY:
            tp = 'üñä'
        elif problem.prob_type == PROB_TYPE.ORALLY:
            tp = 'üó£'
        else:
            tp = '?'
        if is_sos_question:
            use_callback = CALLBACK.SOS_PROBLEM_SELECTED
            tt = '‚ùì'
        else:
            use_callback = CALLBACK.PROBLEM_SELECTED
            tt = ""
        task_button = types.InlineKeyboardButton(
            text=f"{tt}{tick} {tp} {problem}{tt}",
            callback_data=f"{use_callback}_{problem.id}"
        )
        keyboard_markup.add(task_button)
    # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É —Ñ–∏—á—É
    # to_lessons_button = types.InlineKeyboardButton(
    #     text="–ö —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤",
    #     callback_data=f"{Callback.SHOW_LIST_OF_LISTS}"
    # )
    # keyboard_markup.add(to_lessons_button)
    to_lessons_button = types.InlineKeyboardButton(
        text="üïπüé≤ –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É üéâüèÜ",
        url=f'https://vmsh179bot3.proj179.ru/game/webtoken/{Webtoken.webtoken_by_user(student)}'
    )
    keyboard_markup.add(to_lessons_button)
    return keyboard_markup


def build_lessons():
    logger.debug('keyboards.build_lessons')
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    logger.error('–ó–¥–µ—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ level')
    # TODO add level
    # for lesson in problems.all_lessons:
    #     lesson_button = types.InlineKeyboardButton(
    #         text=f"–õ–∏—Å—Ç–æ–∫ {lesson}",
    #         callback_data=f"{Callback.LIST_SELECTED}_{lesson}",
    #     )
    #     keyboard_markup.add(lesson_button)
    return keyboard_markup


def build_test_answers(problem: Problem):
    logger.debug('keyboards.build_test_answers')
    choices = problem.ans_validation.split(';')
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    for choice in choices:
        lesson_button = types.InlineKeyboardButton(
            text=choice,
            callback_data=f"{CALLBACK.ONE_OF_TEST_ANSWER_SELECTED}_{problem.id}_{choice[:24]}",  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ callback_data ‚Äî 65 –±–∞–π—Ç.
        )
        keyboard_markup.add(lesson_button)
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK.CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_cancel_task_submission():
    logger.debug('keyboards.build_cancel_task_submission')
    keyboard_markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=CALLBACK.CANCEL_TASK_SUBMISSION,
    )
    keyboard_markup.add(cancel_button)
    return keyboard_markup


def build_exit_waitlist():
    logger.debug('keyboards.build_exit_waitlist')
    keyboard_markup = types.ReplyKeyboardMarkup(selective=True, resize_keyboard=True)
    exit_button = types.KeyboardButton(
        text="/exit_waitlist –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
    )
    keyboard_markup.add(exit_button)
    return keyboard_markup


def build_student_in_conference():
    logger.debug('keyboards.build_student_in_conference')
    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚úî –ë–µ—Å–µ–¥–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
        callback_data=f"{CALLBACK.GET_OUT_OF_WAITLIST}"
    ))
    keyboard_markup.add(types.InlineKeyboardButton(
        text=f"‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—Å—Ç–Ω–æ–π —Å–¥–∞—á–∏",
        callback_data=f"{CALLBACK.GET_OUT_OF_WAITLIST}"
    ))
    return keyboard_markup


def build_student_sos_actions():
    logger.debug('keyboards.build_student_sos_actions')
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        text=f"–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞—á–µ",
        callback_data=CALLBACK.PROBLEM_SOS
    )
    keyboard.add(button)
    button = types.InlineKeyboardButton(
        text=f"–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å",
        callback_data=CALLBACK.OTHER_SOS
    )
    keyboard.add(button)
    return keyboard


def build_student_reaction_on_task_bad_verdict(result_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–ª—É—á–∞—é—â–µ–≥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
    (–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–∞–∂–∞—Ç–∏—è —É—á–∏—Ç–µ–ª–µ–º "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ —Å—Ç—É–¥–µ–Ω—Ç—É ...").
    """
    logger.debug('keyboards.build_student_reaction_on_task_bad_verdict')
    keyboard = types.InlineKeyboardMarkup()
    for reaction in db.get_reactions_enum(REACTION.WRITTEN_STUDENT):
        keyboard.add(
            types.InlineKeyboardButton(
                text=reaction['reaction'],
                callback_data=f'{CALLBACK.REACTION}_{result_id}_None_{reaction["reaction_id"]}_{REACTION.WRITTEN_STUDENT}'
            )
        )
    return keyboard


def build_student_reaction_oral(zoom_conversation_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å—Ç–Ω–æ–π —Å–¥–∞—á–∏."""
    logger.debug('keyboards.build_student_reaction_oral')
    keyboard = types.InlineKeyboardMarkup()
    for reaction in db.get_reactions_enum(REACTION.ORAL_STUDENT):
        keyboard.add(
            types.InlineKeyboardButton(
                text=reaction['reaction'],
                callback_data=f'{CALLBACK.REACTION}_None_{zoom_conversation_id}_{reaction["reaction_id"]}_{REACTION.ORAL_STUDENT}'
            )
        )
    return keyboard
