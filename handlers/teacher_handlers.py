import datetime
import re
import aiogram
import asyncio
from aiogram.dispatcher.webhook import types
from aiogram.dispatcher import filters
from aiogram.utils.exceptions import BadRequest
from urllib.parse import urlencode
from Levenshtein import jaro_winkler
from random import randrange

from helpers.consts import *
from helpers.config import logger
import db_methods as db
from helpers.features import VERDICT_MODE, FEATURES, RESULT_MODE
from models import User, Problem, State, Waitlist, WrittenQueue, Result
from helpers.bot import bot, reg_callback, dispatcher, reg_state
from handlers import teacher_keyboards, student_keyboards
from handlers.student_handlers import sleep_and_send_problems_keyboard, refresh_last_student_keyboard, WHITEBOARD_LINK
from handlers.main_handlers import process_regular_message  # TODO –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


def get_problem_lock(teacher_id: int):
    key = f'{teacher_id}_pl'
    value = db.sql.kv.get(key, None)
    return int(value) if value else None


def del_problem_lock(teacher_id: int):
    key = f'{teacher_id}_pl'
    db.sql.kv.pop(key, None)


def set_problem_lock(teacher_id: int, problem_id: int):
    key = f'{teacher_id}_pl'
    value = f'{problem_id}'
    db.sql.kv[key] = value


async def take_random_written_problem_and_start_check(teacher: User, problem_id: int):
    problem = Problem.get_by_id(problem_id)
    top = WrittenQueue.take_top_synonyms(teacher.id, problem.synonyms)
    # if top:
    # # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É 10 —Ç–æ–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –≤—ã–±–æ—Ä
    # await bot.answer_callback_query_ig(query.id)
    # await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
    #                        reply_markup=teacher_keyboards.build_teacher_select_written_problem(top))
    while top:
        # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
        choice = randrange(0, len(top))
        taken = top.pop(choice)
        student = User.get_by_id(taken['student_id'])
        problem = Problem.get_by_id(taken['problem_id'])
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        is_unlocked = WrittenQueue.mark_being_checked(student.id, problem.id, teacher.id)
        if not is_unlocked:
            continue
        await forward_discussion_and_start_checking(teacher.chat_id, None, student, problem, teacher)
        break
    else:
        del_problem_lock(teacher.id)
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í—Å–µ —ç—Ç–∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_state(STATE.TEACHER_SELECT_ACTION)
async def prc_teacher_select_action(message: types.Message, teacher: User):
    use_chat_id = (message and message.chat and message.chat.id) or (teacher and teacher.chat_id) or None
    logger.debug('prc_teacher_select_action')
    locked_problem_id = get_problem_lock(teacher.id)
    if not locked_problem_id:
        await bot.send_message(chat_id=use_chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                               reply_markup=teacher_keyboards.build_teacher_actions())
    else:
        await take_random_written_problem_and_start_check(teacher, locked_problem_id)


@reg_state(STATE.TEACHER_IS_CHECKING_TASK)
async def prc_teacher_is_checking_task_state(message: types.Message, teacher: User):
    logger.debug('prc_teacher_is_checking_task_state')
    teacher_state = State.get_by_user_id(teacher.id)
    problem_id = teacher_state['problem_id']
    student_id = teacher_state['last_student_id']
    wtd_id = WrittenQueue.add_to_discussions(student_id, problem_id, teacher.id, message.text, None, message.chat.id,
                                             message.message_id)
    teacher_state['info'].append(wtd_id)  # –î–æ–±–∞–≤–ª—è–µ–º id –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
    State.set_by_user_id(**teacher_state)
    prev_keyboard = db.last_keyboard.get(teacher.id)
    reply_markup = teacher_keyboards.build_written_task_checking_verdict(User.get_by_id(student_id),
                                                                         Problem.get_by_id(problem_id),
                                                                         teacher_state['info']) if (
            problem_id > 0) else teacher_keyboards.build_answer_verdict(User.get_by_id(student_id),
                                                                        Problem.get_by_id(-problem_id),
                                                                        teacher_state['info'])
    # await bot.send_message(chat_id=message.chat.id, text="–û–∫, –∑–∞–ø–∏—Å–∞–ª")
    keyb_msg = await bot.send_message(chat_id=message.chat.id,
                                      text='–û–∫, –∑–∞–ø–∏—Å–∞–ª',
                                      reply_markup=reply_markup)
    if prev_keyboard:
        await bot.edit_message_reply_markup_ig(chat_id=prev_keyboard['chat_id'], message_id=prev_keyboard['tg_msg_id'],
                                               reply_markup=None)
    db.last_keyboard.update(teacher.id, keyb_msg.chat.id, keyb_msg.message_id)


@reg_state(STATE.TEACHER_ACCEPTED_QUEUE)
async def prc_teacher_accepted_queue(message: types.message, teacher: User):
    logger.debug('prc_teacher_accepted_queue')
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    await bot.send_message(chat_id=message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(plus_ids=set(),
                                                                                          minus_ids=set(),
                                                                                          student=student,
                                                                                          online=teacher.online))


@reg_state(STATE.TEACHER_WRITES_STUDENT_NAME)
async def prc_teacher_writes_student_name_state(message: types.message, teacher: User):
    logger.debug('prc_teacher_writes_student_name_state')
    name_to_find = message.text or ''
    await bot.send_message(chat_id=message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–¥–∞—á",
                           reply_markup=teacher_keyboards.build_select_student(name_to_find))


@dispatcher.message_handler(filters.RegexpCommandsFilter(regexp_commands=['^/?oralrecheck.*']))
async def oral_recheck(message: types.Message):
    logger.debug('oral_recheck')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    if (match := re.fullmatch(r'/oralrecheck_([^_]*)', message.text or '')):
        token = match.group(1)
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n¬´/oralrecheck_token¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´/oralrecheck_aa9bb4¬ª",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    # if student:
    #     message = await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    #     await forward_discussion_and_start_checking(message.chat.id, message.message_id, student, problem, teacher)


@dispatcher.message_handler(filters.RegexpCommandsFilter(regexp_commands=['^/?recheck.*']))
async def recheck(message: types.Message):
    logger.debug('recheck')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    prob = prob_id = None
    if (match := re.fullmatch(r'/recheck(?:_xd5fqk)?[\s_]+([a-zA-Z0-9]+)[\s_]+(\d+)([–∞-—è–ê-–Ø]\w*)\.(\d+)([–∞-—è]?)\s*',
                              message.text or '')):
        token, lst, level, prob, item = match.groups()
        problem = Problem.get_by_key(level, int(lst), int(prob), item)
    elif (match := re.fullmatch(r'/recheck(?:_xd5fqk)?_([^_]*)_([^_]*)', message.text or '')):
        token, prob_id = match.groups()
        problem = Problem.get_by_id(prob_id)
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n¬´/recheck token problem¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´/recheck aa9bb4 3–Ω.11–∞¬ª",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if not problem and prob is not None:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ {lst}{level}.{prob}{item} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if not problem and prob_id is not None:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ —Å id {prob_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if student and problem:
        message = await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        await forward_discussion_and_start_checking(message.chat.id, message.message_id, student, problem, teacher)


@dispatcher.message_handler(commands=['set_level', 'sl'])
async def set_student_level(message: types.Message):
    logger.debug('set_student_level')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    text = message.text.split()
    try:
        cmd, token, new_level = text
    except:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"/set_level token –Ω/–ø/—ç",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω",
        )
    if new_level == LEVEL.NOVICE:
        student.set_level(LEVEL.NOVICE)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
    elif new_level == LEVEL.PRO:
        student.set_level(LEVEL.PRO)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö"
    elif new_level == LEVEL.EXPERT:
        student.set_level(LEVEL.EXPERT)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
    elif new_level == LEVEL.GR8:
        student.set_level(LEVEL.GR8)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É 8 –∫–ª–∞—Å—Å–∞"
    else:
        return
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω",
    )
    if student.chat_id:
        try:
            await bot.send_message(chat_id=student.chat_id, text=stud_msg)
        except:
            pass


@reg_callback(CALLBACK.GET_SOS_TASK)
async def prc_get_written_task_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_written_task_callback')
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    top = WrittenQueue.take_sos_top(teacher.id)
    await bot.answer_callback_query_ig(query.id)
    if not top:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç")
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        asyncio.create_task(prc_teacher_select_action(None, teacher))
    else:
        # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É 10 —Ç–æ–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –≤—ã–±–æ—Ä
        await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å",
                               reply_markup=teacher_keyboards.build_teacher_select_written_problem(top))
        # teacher_keyboards.build_teacher_actions


@reg_callback(CALLBACK.SELECT_WRITTEN_TASK_TO_CHECK)
async def prc_SELECT_WRITTEN_TASK_TO_CHECK_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_SELECT_WRITTEN_TASK_TO_CHECK_callback')
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    rows = db.written_task_queue.get_written_tasks_count_by_synonyms()
    problems_and_counts = []
    for row in rows:
        first_problem_id = row['synonyms'].split(';')[0]
        problems_and_counts.append((Problem.get_by_id(first_problem_id), row['cnt'], row['days_waits']))
    await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                           reply_markup=teacher_keyboards.build_select_problem_to_check(problems_and_counts))
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.CHECK_ONLY_SELECTED_WRITEN_TASK)
async def prc_CHECK_ONLY_SELECTED_WRITEN_TASK_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_CHECK_ONLY_SELECTED_WRITEN_TASK_callback')
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ—Ç —ç—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∏—Å—å–º–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    problem_id = int(query.data[2:])
    set_problem_lock(teacher.id, problem_id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    # –í—Å—ë, —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞—á–∞ –∑–∞–ª–æ—á–µ–Ω–∞,prc_teacher_select_action –±—É–¥–µ—Ç —Å–∞–º–∞ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á—É
    asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_callback(CALLBACK.TEACHER_CANCEL)
async def prc_teacher_cancel_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_teacher_cancel_callback')
    _, _, wtd_ids_to_remove = query.data.partition('_del_')
    if wtd_ids_to_remove:
        wtd_ids_to_remove = list(map(int, wtd_ids_to_remove.split(',')))  # TODO –ê-–∞-–∞! –¢–†–ï–®–ù–Ø–ö!!!
        db.written_task_discussion.delete(wtd_ids_to_remove)
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    del_problem_lock(teacher.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    asyncio.create_task(prc_teacher_select_action(None, teacher))


async def forward_discussion_and_start_checking(chat_id, message_id, student: User, problem: Problem, teacher: User,
                                                is_sos=False):
    logger.debug('forward_discussion_and_start_checking')
    text = (f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})\n"
            f"{student.name_for_teacher()}\n"
            f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á") if (not is_sos) else (
        f"–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞—á–µ {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})\n"
        f"{student.name_for_teacher()}\n"
        f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á")  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SOS
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω message_id, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞–º –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞). –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    if message_id:
        await bot.edit_message_text_ig(chat_id=chat_id, message_id=message_id, text=text, reply_markup=None)
    else:
        await bot.send_message(chat_id=chat_id, text=text)
    discussion = WrittenQueue.get_discussion(student.id,
                                             problem.id if (not is_sos) else (-problem.id))  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SOS
    for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        forward_success = False
        if row['chat_id'] and row['tg_msg_id']:
            try:
                await bot.forward_message(chat_id, row['chat_id'], row['tg_msg_id'])
                forward_success = True
            except aiogram.utils.exceptions.TelegramAPIError:
                await bot.send_message(chat_id=chat_id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ...')
        if forward_success:
            pass
        elif row['text']:
            await bot.send_message(chat_id=chat_id, text=row['text'])
        elif row['attach_path']:
            # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
            path = row['attach_path'].replace('/web/vmsh179bot/vmsh179bot/', '')
            file, _, ext = path.rpartition('.')
            if ext and ext.lower() in ('jpg', 'png'):
                input_file = types.input_file.InputFile(path)
                await bot.send_photo(chat_id=chat_id, photo=input_file)
            elif ext.lower() == 'txt':
                text = open(row['attach_path'], 'r', encoding='utf-8').read()
                await bot.send_message(chat_id=chat_id, text=text)
            else:
                # –•–º... –°—Ç—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    await bot.send_document(chat_id=chat_id, document=types.input_file.InputFile(path))
                except:
                    pass
    State.set_by_user_id(teacher.id, STATE.TEACHER_IS_CHECKING_TASK, problem.id if (not is_sos) else (-problem.id),
                         last_teacher_id=teacher.id,
                         last_student_id=student.id,
                         info=[])  # info ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å #–¥–æ–±–∞–≤–∏–ª —É—á—ë—Ç SOS
    keyb_msg = await bot.send_message(chat_id=chat_id,
                                      text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n'
                                           '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏ –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª—é—Å)'
                                      if (not is_sos) else '‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n'
                                                           '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É)',
                                      reply_markup=teacher_keyboards.build_written_task_checking_verdict(student,
                                                                                                         problem) if (
                                          not is_sos) else teacher_keyboards.build_answer_verdict(student, problem))
    db.last_keyboard.update(teacher.id, keyb_msg.chat.id, keyb_msg.message_id)


@reg_callback(CALLBACK.WRITTEN_TASK_SELECTED)
async def prc_written_task_selected_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_selected_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    chat_id = query.message.chat.id
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(abs(int(problem_id)))  # —É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å
    await bot.answer_callback_query_ig(query.id)
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    is_unlocked = WrittenQueue.mark_being_checked(student.id, problem_id, teacher.id)
    if not is_unlocked:
        await bot.send_message(chat_id=chat_id, text='–≠—Ç—É –∑–∞–¥–∞—á—É —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å.')
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        asyncio.create_task(prc_teacher_select_action(None, teacher))
        return
    if (int(problem_id) > 0):
        await forward_discussion_and_start_checking(chat_id, query.message.message_id, student, problem, teacher)
    else:
        await forward_discussion_and_start_checking(chat_id, query.message.message_id, student, problem, teacher,
                                                    is_sos=True)


async def forward_discussion_to_student(student: User, problem: Problem, verdict: VERDICT, result_id: int = None):
    """ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É –≤–µ—Ä–¥–∏–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.
    –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞, —Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—á–∏—Ç–µ–ª—è.
    –ï—Å–ª–∏ –Ω–µ —Ä–µ—à–µ–Ω–∞, —Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –æ —á—ë–º —Ä–µ—á—å –≤ —Ü–µ–ª–æ–º.
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await refresh_last_student_keyboard(student)
    # –ü–æ–ª—É—á–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π
    discussion = WrittenQueue.get_discussion(student.id, problem.id)
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∞
    last_pup_post = max([rn for rn in range(len(discussion)) if discussion[rn]['teacher_id'] is None] + [-2])
    last_teacher_messages = discussion[last_pup_post + 1:]
    solved = verdict in (VERDICT.SOLVED, VERDICT.VERDICT_PLUS)
    if solved:
        messages_to_forward = last_teacher_messages
    else:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        messages_to_forward = discussion[-20:]
    text_problem_part = f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})"

    if VERDICT_MODE == FEATURES.VERDICT_PLUS_MINUS:
        if solved and not messages_to_forward:
            text_vedict_part = "–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!"
        elif solved and messages_to_forward:
            text_vedict_part = "–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!\n–í–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á"
        elif not solved and not last_teacher_messages:
            text_vedict_part = "–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ :(\n–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á"
        else:
            text_vedict_part = "–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:\n–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á"
    else:
        verdict_text = VERDICT_DECODER[verdict]
        text_vedict_part = f"–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {verdict_text}"
        if last_teacher_messages:
            text_vedict_part += '\n‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á'
        else:
            text_vedict_part += ' –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'
    await bot.send_message(chat_id=student.chat_id, text=f"{text_problem_part} {text_vedict_part}",
                           disable_notification=True)
    try:
        for row in messages_to_forward:
            # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if row['teacher_id']:
                await bot.copy_message(student.chat_id, row['chat_id'], row['tg_msg_id'], disable_notification=True)
            else:
                await bot.forward_message(student.chat_id, row['chat_id'], row['tg_msg_id'], disable_notification=True)
            # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            # if row['chat_id'] and row['tg_msg_id']:
            #     await bot.copy_message(student.chat_id, row['chat_id'], row['tg_msg_id'], disable_notification=True)
            # elif row['text']:
            #     await bot.send_message(chat_id=student.chat_id, text=row['text'], disable_notification=True)
            # elif row['attach_path']:
            #     # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
            #     input_file = types.input_file.InputFile(row['attach_path'])
            #     await bot.send_photo(chat_id=student.chat_id, photo=input_file, disable_notification=True)
        if solved:
            student_reaction_keyboard = None
        else:
            student_reaction_keyboard = student_keyboards.build_student_reaction_on_task_bad_verdict(result_id)
        if messages_to_forward:
            await bot.send_message(chat_id=student.chat_id,
                                   text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                                   reply_markup=student_reaction_keyboard,
                                   disable_notification=True)

    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')


@reg_callback(CALLBACK.WRITTEN_TASK_OK)
async def prc_written_task_ok_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_ok_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    _, student_id, problem_id, set_verdict = query.data.split('_')
    set_verdict = VERDICT(int(set_verdict))
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    result_id = Result.add(student, problem, teacher, set_verdict, None, RES_TYPE.WRITTEN)
    if VERDICT_MODE == FEATURES.VERDICT_PLUS_MINUS:
        text = (
            f'üëç –û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! '
            f'–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
            f'/recheck_{student.token}_{problem.id}')
    else:
        verdict_text = VERDICT_DECODER[set_verdict]
        text = (
            f'üëç –ü–æ—Å—Ç–∞–≤–∏–ª–∏ {verdict_text} –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! '
            f'–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
            f'/recheck_{student.token}_{problem.id}')

    WrittenQueue.delete_from_queue(student.id, problem.id)
    reaction_msg = await bot.send_message(chat_id=query.message.chat.id,
                                          text=text,
                                          reply_markup=teacher_keyboards.build_teacher_reaction_on_solution(result_id),
                                          parse_mode='HTML')
    bot.remove_markup_after(reaction_msg, 15)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    if RESULT_MODE == FEATURES.RESULT_IMMEDIATELY:
        asyncio.create_task(refresh_last_student_keyboard(student))  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        asyncio.create_task(forward_discussion_to_student(student, problem, set_verdict))
    asyncio.create_task(prc_teacher_select_action(None, teacher))


# TODO –û–±–æ–π—Ç–∏—Å—å –æ–¥–Ω–∏–º –∫–æ–ª–±–µ–∫–æ–º
@reg_callback(CALLBACK.WRITTEN_TASK_BAD)
async def prc_written_task_bad_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_bad_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    _, student_id, problem_id, set_verdict = query.data.split('_')
    set_verdict = VERDICT(int(set_verdict))
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    result_id = Result.add(student, problem, teacher, set_verdict, None, RES_TYPE.WRITTEN)
    db.result.delete_plus(student_id, problem.id, RES_TYPE.WRITTEN, VERDICT.REJECTED_ANSWER)
    WrittenQueue.delete_from_queue(student.id, problem.id)
    await refresh_last_student_keyboard(student)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    teacher_msg = await bot.send_message(chat_id=query.message.chat.id,
                                         text=f'‚ùå –≠—Ö, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –º–∏–Ω—É—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} '
                                              f'—à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
                                              f'/recheck_{student.token}_{problem.id}',
                                         parse_mode='HTML')
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —à–∫–æ–ª—å–Ω–∏–∫—É
    if RESULT_MODE == FEATURES.RESULT_IMMEDIATELY:
        asyncio.create_task(refresh_last_student_keyboard(student))  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        asyncio.create_task(forward_discussion_to_student(student, problem, set_verdict, result_id=result_id))
    asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_callback(CALLBACK.SEND_ANSWER)
async def prc_send_answer_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_send_answer_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(-int(problem_id))  # —É–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å SOS
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    WrittenQueue.delete_from_queue(student.id, -problem.id)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω—É—Å SOS
    await bot.send_message(chat_id=query.message.chat.id,
                           text='–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω',
                           parse_mode='HTML')

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —à–∫–æ–ª—å–Ω–∏–∫—É
    student_chat_id = User.get_by_id(student.id).chat_id
    try:
        discussion = WrittenQueue.get_discussion(student.id, -problem.id)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω—É—Å SOS
        await bot.send_message(chat_id=student_chat_id,
                               text=f"–ï—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞—á–µ {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}).\n"
                                    f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
                                    f"‚¨á‚¨á‚¨á‚¨á",
                               disable_notification=True)
        for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
            # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            if row['chat_id'] and row['tg_msg_id']:
                try:
                    await bot.copy_message(student_chat_id, row['chat_id'], row['tg_msg_id'],
                                           disable_notification=True)
                except aiogram.utils.exceptions.BadRequest as e:
                    logger.error(f'–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ –æ—Ç—Ñ–æ—Ä–≤–∞—Ä–¥–∏–ª–æ—Å—å... {student_chat_id}\n{e}')
            elif row['text']:
                await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
            elif row['attach_path']:
                # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                input_file = types.input_file.InputFile(row['attach_path'])
                await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
        await bot.send_message(chat_id=student_chat_id,
                               text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                               disable_notification=True)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student_chat_id}\n{e}')
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_callback(CALLBACK.GET_QUEUE_TOP)
async def prc_get_queue_top_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_queue_top_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    top = Waitlist.top(1)
    if not top:
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ, —Ç–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º.
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        await bot.answer_callback_query_ig(query.id)
        await prc_teacher_select_action(query.message, teacher)
        return

    student = User.get_by_id(top[0]['student_id'])
    problem = Problem.get_by_id(top[0]['problem_id'])
    State.set_by_user_id(teacher.id, STATE.TEACHER_ACCEPTED_QUEUE, oral_problem_id=problem.id,
                         last_student_id=student.id)
    Waitlist.leave(student.id)
    db.delete_url_by_user_id(student.id)
    try:
        await bot.unpin_chat_message(chat_id=student.chat_id)
    except BadRequest:
        pass

    params = {
        'studentId': student.id,
        'teacherId': teacher.id,
        'problemId': problem.id,
        'displayName': f"{student.name} {student.surname}"
    }
    student_link = WHITEBOARD_LINK.format(urlencode(params))
    params['displayName'] = f"{teacher.name} {teacher.middlename} {teacher.surname}"
    teacher_link = WHITEBOARD_LINK.format(urlencode(params))
    # –í–æ–æ–±—â–µ —à–∫–æ–ª—å–Ω–∏–∫ –º–æ–≥ —É—Å–ø–µ—Ç—å –ø—Ä–æ–≥–Ω–∞—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–º—É –ø–∏—Å–∞—Ç—å
    try:
        await bot.send_message(chat_id=student.chat_id,
                               text=f"<b>–î–æ –≤–∞—Å –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å</b> –Ω–∞ —Å–¥–∞—á—É –∑–∞–¥–∞—á–∏\n{problem}\n"
                                    f"<b><a href=\"{student_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>.",
                               reply_markup=types.ReplyKeyboardRemove(),
                               parse_mode='HTML')
        State.set_by_user_id(student.id, STATE.STUDENT_IS_IN_CONFERENCE, oral_problem_id=problem.id,
                             last_teacher_id=teacher.id)
        await bot.send_message(chat_id=student.chat_id, text="–ù–∞–∂–º–∏—Ç–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é.",
                               reply_markup=student_keyboards.build_student_in_conference(),
                               parse_mode='HTML')
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
        # –°–Ω–∏–º–∞–µ–º —Å–æ —à–∫–æ–ª—å–Ω–∏–∫–∞ —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    else:
        await bot.answer_callback_query_ig(query.id, show_alert=True)
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"<b>–í–∞—à —É—á–µ–Ω–∏–∫: {student}.\n"
                                    f"{problem}.\n"
                                    f"<a href=\"{teacher_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>",
                               parse_mode='HTML')
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(message=query.message)


@reg_callback(CALLBACK.INS_ORAL_PLUSSES)
async def prc_ins_oral_plusses(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_ins_oral_plusses')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    await bot.send_message(chat_id=teacher.chat_id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —à–∫–æ–ª—å–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–º–∏–ª–∏–∏), —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –ø–ª—é—Å—ã",
                           reply_markup=teacher_keyboards.build_cancel_keyboard())
    await bot.answer_callback_query_ig(query.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_WRITES_STUDENT_NAME)


@reg_callback(CALLBACK.SET_VERDICT)
async def prc_set_verdict_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_set_verdict_callback')
    state = State.get_by_user_id(teacher.id)
    problem_id = state['oral_problem_id']
    # TODO !!!
    if problem_id is None:
        logger.info("WAT problem_id is None")
        return
    problem = Problem.get_by_id(problem_id)
    verdict = int(query.data.split('_')[1])
    student_id = state['last_student_id']
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    await bot.answer_callback_query_ig(query.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    student = User.get_by_id(student_id)
    Result.add(student, problem, teacher, verdict, None, RES_TYPE.ZOOM)
    await refresh_last_student_keyboard(student)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_callback(CALLBACK.STUDENT_SELECTED)
async def prc_student_selected_callback(query: types.CallbackQuery, teacher: User, *, remove_old_buttons=True):
    logger.debug('prc_student_selected_callback')
    _, student_id = query.data.split('_')
    student_id = int(student_id)
    student = User.get_by_id(student_id)
    msg_text = f"–í–Ω–æ—Å–∏–º –ø–ª—é—Å–∏–∫–∏ —à–∫–æ–ª—å–Ω–∏–∫—É:\n" + student.name_for_teacher()
    if remove_old_buttons:
        await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                       reply_markup=None, text=msg_text)
    else:  # TODO –§–ò–ß–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!!
        await bot.send_message(chat_id=query.message.chat.id, reply_markup=None, text=msg_text)
    await bot.send_message(chat_id=query.message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏"
                                "\n(–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)"
                                f"\n(—É –≤–∞—Å —Å–µ–π—á–∞—Å —Ä–µ–∂–∏–º ¬´{'–í –®–ö–û–õ–ï' if teacher.online == ONLINE_MODE.SCHOOL else '–û–ù–õ–ê–ô–ù'}¬ª, /online –∏ /school –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)",
                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(plus_ids=set(),
                                                                                          minus_ids=set(),
                                                                                          student=student,
                                                                                          online=teacher.online))
    State.set_by_user_id(teacher.id, STATE.TEACHER_WRITES_STUDENT_NAME, last_student_id=student.id)
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.ADD_OR_REMOVE_ORAL_PLUS)
async def prc_add_or_remove_oral_plus_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_add_or_remove_oral_plus_callback')
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    if not student:
        # –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å
        await prc_teacher_cancel_callback(query, teacher)
        await bot.answer_callback_query_ig(query.id)
        return
    _, problem_id, plus_ids, minus_ids = query.data.split('_')
    problem_id = int(problem_id)
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    # TODO
    if problem_id in plus_ids:
        plus_ids.discard(problem_id)
        minus_ids.add(problem_id)
    elif problem_id in minus_ids:
        minus_ids.discard(problem_id)
    else:
        plus_ids.add(problem_id)
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(
                                               plus_ids=plus_ids, minus_ids=minus_ids,
                                               student=student, online=teacher.online))
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.FINISH_ORAL_ROUND)
async def prc_finish_oral_round_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_finish_oral_round_callback')
    _, plus_ids, minus_ids = query.data.split('_')
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    if not student:
        teacher_message = await bot.send_message(chat_id=query.message.chat.id,
                                                 text=f"–ß—Ç–æ-—Ç–æ –≤ –±–æ—Ç–µ —Å–ª–æ–º–∞–ª–æ—Å—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω. :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await bot.answer_callback_query_ig(query.id)
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        asyncio.create_task(prc_teacher_select_action(None, teacher))
        return

    pluses = [Problem.get_by_id(prb_id) for prb_id in plus_ids]
    minuses = [Problem.get_by_id(prb_id) for prb_id in minus_ids]
    human_readable_pluses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in pluses]
    human_readable_minuses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in minuses]
    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª—é—Å–∏–∫–∏
    if teacher.online == ONLINE_MODE.SCHOOL:
        res_type = RES_TYPE.SCHOOL
    else:
        res_type = RES_TYPE.ZOOM
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ –∑–∞–¥–∞—á–µ, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∏–º –ø–ª—é—Å –∏–ª–∏ –º–∏–Ω—É—Å
    any_problem = pluses[0] if pluses else minuses[0] if minuses else None
    if any_problem:
        zoom_conversation_id = db.zoom_conversation.insert(student_id=student_id, teacher_id=teacher.id, lesson=any_problem.lesson, level=any_problem.level)
    else:
        zoom_conversation_id = None
    # –ó–∞–ª–∏–≤–∞–µ–º –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –≤ –±–∞–∑—É
    for problem in pluses:
        Result.add(student, problem, teacher, VERDICT.SOLVED, None, res_type, zoom_conversation_id=zoom_conversation_id)
        # –ê –µ—â—ë –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        db.written_task_queue.delete(student_id, problem.id)
    for problem in minuses:
        db.result.delete_plus(student_id, problem.id, RES_TYPE.SCHOOL, VERDICT.REJECTED_ANSWER)
        db.result.delete_plus(student_id, problem.id, RES_TYPE.ZOOM, VERDICT.REJECTED_ANSWER)
        Result.add(student, problem, teacher, VERDICT.WRONG_ANSWER, None, res_type, zoom_conversation_id=zoom_conversation_id)
    await refresh_last_student_keyboard(student)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    text = f"–®–∫–æ–ª—å–Ω–∏–∫: {student.token} {student.surname} {student.name}\n"
    if human_readable_pluses:
        text += f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–ª—é—Å—ã üëç –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}"
    if human_readable_minuses:
        text += f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –º–∏–Ω—É—Å—ã ‚ùå –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_minuses)}"
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                   text=text,
                                   reply_markup=None)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–∏—Ç–µ–ª—é –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —É—Å—Ç–Ω–æ–π —Å–¥–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞
    if any_problem:
        zoom_reaction_msg = await bot.send_message(
            chat_id=query.message.chat.id,
            text=f"–û—Ü–µ–Ω–∏—Ç–µ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É:",
            reply_markup=teacher_keyboards.build_teacher_reaction_oral(zoom_conversation_id)
        )
        bot.delete_messages_after(zoom_reaction_msg, 15)

    # –ü–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—å–Ω–∏–∫—É –æ –ø—Ä–æ–≤–µ—Ä–∫–µ (–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞)
    try:
        if any_problem:
            student_message = await bot.send_message(chat_id=student.chat_id,
                                                     text=f"–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –≤–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫–∏ –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}",
                                                     reply_markup=student_keyboards.build_student_reaction_oral(zoom_conversation_id),
                                                     disable_notification=True)
        # –≠—Ç–æ—Ç –∫—É—Å–æ–∫ –¥–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        student_state = State.get_by_user_id(student.id)
        if student_state['state'] == STATE.STUDENT_IS_IN_CONFERENCE:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
            await process_regular_message(student_message)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
    # –£—Ä–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!
    await bot.answer_callback_query_ig(query.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∏—Ç–µ–ª—é —Ä–µ–∂–∏–º –≤–Ω–µ—Å–µ–Ω–∏—è —É—Å—Ç–Ω—ã—Ö –∑–∞–¥–∞—á, —Å—Ä–∞–∑—É —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ ¬´–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é¬ª
    await prc_ins_oral_plusses(query, teacher)
    # State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    # asyncio.create_task(prc_teacher_select_action(None, teacher))


@dispatcher.message_handler(commands=['find_student', 'fs'])
async def find_student(message: types.Message):
    logger.debug('find_student')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    search = None
    if (match := re.match(r'/\w+\s+(\S+)', message.text or '')):
        search = match.group(1)
    if not search:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏", )
        return
    students = sorted(
        User.all_students(),
        key=lambda user: min(
            -jaro_winkler(search.lower(), f'{user.surname} {user.name} {user.token}'.lower(), prefix_weight=1 / 32),
            -jaro_winkler(search, user.token, prefix_weight=1 / 32),
        )
    )
    if students:
        lines = [
            f'{student.surname:<20} {student.name:<15} {student.level} {student.token} {"üè´" if student.online == ONLINE_MODE.SCHOOL else "üì°"}'
            for student in students[:10]]
        await bot.send_message(chat_id=message.chat.id, parse_mode="HTML", text='<pre>' + '\n'.join(lines) + '</pre>')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞')


@dispatcher.message_handler(commands=['set_online', 'so'])
async def set_online(message: types.Message):
    logger.debug('set_online')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    text = message.text.split()
    try:
        cmd, token, new_online = text
    except:
        await bot.send_message(chat_id=message.chat.id, text=f"/set_online token online/school", )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω", )
        return
    new_online = ONLINE_MODE_DECODER.get(new_online.strip(), None)
    if new_online:
        student.set_online_mode(new_online)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω",
        )


@dispatcher.message_handler(commands=['set_teacher', 'st'])
async def set_teacher(message: types.Message):
    '''
    –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–æ—Ç–µ —É—á–∏—Ç–µ–ª—é –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ—ë —É—á–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    '''
    logger.debug('set_teacher')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    asyncio.create_task(prc_teacher_select_action(None, teacher))


@reg_callback(CALLBACK.CHANGE_LEVEL)
async def prc_change_level_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_written_task_callback')
    # –ü–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤—É
    # await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
    #                                        reply_markup=None)
    _, student_id, lvl = query.data.split('_')
    student = User.get_by_id(int(student_id))
    level = LEVEL(lvl)
    if student:
        student.set_level(level)
        if State.get_by_user_id(student.id)['state'] != STATE.STUDENT_IS_SLEEPING:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        if student.chat_id:
            message = await bot.send_message(
                chat_id=student.chat_id,
                text=f"–í–∞–º –∏–∑–º–µ–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–∞ ¬´{level.slevel}¬ª",
            )
            asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))
        await bot.send_message(
            chat_id=query.message.chat.id,
            text=f"–ü–µ—Ä–µ–≤–µ–ª–∏ —à–∫–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ¬´{level.slevel}¬ª."
                 f"\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–ª—é—Å—ã –ø–æ —Å—Ç–∞—Ä–æ–º—É —É—Ä–æ–≤–Ω—é –ù–ï –ë–´–õ–ò –í–ù–ï–°–ï–ù–´. –ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
        )
        query.data = f'{CALLBACK.STUDENT_SELECTED}_{student_id}'
        await prc_student_selected_callback(query, teacher)
    await bot.answer_callback_query_ig(query.id)


@dispatcher.message_handler(commands=['zoom_queue', 'z', 'zall'])
async def zoom_queue(message: types.Message):
    '''
    –í—ã–≤–µ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤
    '''
    logger.debug('zoom_queue')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    show_all = 'all' in message.text
    queue = db.zoom_queue.get_first_from_queue(show_all)
    # [{'zoom_user_name': 'name3', 'enter_ts': '2022-01-01 02:00:00', 'status': 0}]
    show_queue = []
    for row in queue:
        waits = datetime.datetime.now() - datetime.datetime.fromisoformat(row['enter_ts'])
        waits_min = (waits.total_seconds() + 30) // 60
        if row['status'] == 1:
            alert = ' (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ª–µ)'
        elif row['status'] == -1:
            alert = ' (–Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–µ)'
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–µ, —Ç–æ –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            continue
        else:
            alert = ''
        show_queue.append(f'{waits_min} –º–∏–Ω   {row["zoom_user_name"]}  {alert}')
    in_queue = db.zoom_queue.get_queue_count()
    show_queue.append(f'\n–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {in_queue} —á–µ–ª–æ–≤–µ–∫')
    await bot.send_message(
        chat_id=message.chat.id,
        text='–û—á–µ—Ä–µ–¥—å –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:\n' + '\n'.join(show_queue)
    )
    teacher_state = State.get_by_user_id(teacher.id)
    if teacher_state['state'] == STATE.TEACHER_SELECT_ACTION:
        await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                               reply_markup=teacher_keyboards.build_teacher_actions())


@dispatcher.message_handler(commands=['set_game_command', 'sg'])
async def set_game_command(message: types.Message):
    logger.debug('set_game_command')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    parts = message.text.split()
    command_id = None
    if len(parts) == 2:
        cmd, command_id = parts
        token = teacher.token
    elif len(parts) == 3:
        cmd, token, command_id = parts
    try:
        command_id = int(command_id)
    except:
        await bot.send_message(chat_id=message.chat.id, text=f"/set_game_command token number", )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω", )
        return
    db.game.set_student_command(student.id, student.level, command_id)
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –∫–æ–º–∞–Ω–¥—É {command_id}",
    )
