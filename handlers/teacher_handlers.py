import re
import aiogram
from aiogram.dispatcher.webhook import types
from aiogram.dispatcher import filters
from urllib.parse import urlencode
from Levenshtein import jaro_winkler

from helpers.consts import *
from helpers.config import logger
from helpers.obj_classes import User, Problem, State, Waitlist, WrittenQueue, db
from helpers.bot import bot, reg_callback, dispatcher, reg_state
from handlers import teacher_keyboards
from handlers.main_handlers import process_regular_message


@reg_state(STATE.TEACHER_SELECT_ACTION)
async def prc_teacher_select_action(message: types.Message, teacher: User):
    logger.debug('prc_teacher_select_action')
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                           reply_markup=teacher_keyboards.build_teacher_actions())


@reg_state(STATE.TEACHER_IS_CHECKING_TASK)
async def prc_teacher_is_checking_task_state(message: types.Message, teacher: User):
    logger.debug('prc_teacher_is_checking_task_state')
    problem_id = State.get_by_user_id(teacher.id)['problem_id']
    student_id = State.get_by_user_id(teacher.id)['last_student_id']
    WrittenQueue.add_to_discussions(student_id, problem_id, teacher.id, message.text, None, message.chat.id,
                                    message.message_id)
    await bot.send_message(chat_id=message.chat.id, text="–û–∫, –∑–∞–ø–∏—Å–∞–ª")


@reg_state(STATE.TEACHER_ACCEPTED_QUEUE)
async def prc_teacher_accepted_queue(message: types.message, teacher: User):
    logger.debug('prc_teacher_accepted_queue')
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    await bot.send_message(chat_id=message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(plus_ids=set(), minus_ids=set(), student=student,
                                                                                          online=teacher.online))


@reg_state(STATE.TEACHER_WRITES_STUDENT_NAME)
async def prc_teacher_writes_student_name_state(message: types.message, teacher: User):
    logger.debug('prc_teacher_writes_student_name_state')
    name_to_find = message.text or ''
    await bot.send_message(chat_id=message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–¥–∞—á",
                           reply_markup=teacher_keyboards.build_select_student(name_to_find))


@dispatcher.message_handler(filters.RegexpCommandsFilter(regexp_commands=['recheck.*']))
async def recheck(message: types.Message):
    logger.debug('recheck')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    prob = prob_id = None
    if (match := re.fullmatch(r'/recheck(?:_xd5fqk)?[\s_]+([a-zA-Z0-9]+)[\s_]+(\d+)([–∞-—è])\.(\d+)([–∞-—è]?)\s*', message.text or '')):
        token, lst, level, prob, item = match.groups()
        problem = Problem.get_by_key(level, int(lst), int(prob), item)
    elif (match := re.fullmatch(r'/recheck(?:_xd5fqk)?_([^_]*)_([^_]*)', message.text or '')):
        token, prob_id = match.groups()
        problem = Problem.get_by_id(prob_id)
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n¬´/recheck token problem¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´/recheck aa9bb4 3–Ω.11–∞¬ª",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if not problem and prob is not None:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ {lst}{level}.{prob}{item} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if not problem and prob_id is not None:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ —Å id {prob_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if student and problem:
        message = await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        await forward_discussion_and_start_checking(message.chat.id, message.message_id, student, problem, teacher)


@dispatcher.message_handler(commands=['set_level'])
async def set_student_level(message: types.Message):
    logger.debug('set_student_level')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    text = message.text.split()
    try:
        cmd, token, new_level = text
    except:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"/set_level token –Ω/–ø/—ç",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω",
        )
    if new_level == LEVEL.NOVICE:
        student.set_level(LEVEL.NOVICE)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
    elif new_level == LEVEL.PRO:
        student.set_level(LEVEL.PRO)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö"
    elif new_level == LEVEL.EXPERT:
        student.set_level(LEVEL.EXPERT)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
    else:
        return
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω",
    )
    if student.chat_id:
        try:
            await bot.send_message(chat_id=student.chat_id, text=stud_msg)
        except:
            pass


@reg_callback(CALLBACK.GET_WRITTEN_TASK)
async def prc_get_written_task_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_written_task_callback')
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    top = WrittenQueue.take_top(teacher.id)
    if not top:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í—Å–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        await bot.answer_callback_query_ig(query.id)
        await process_regular_message(query.message)
    else:
        # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É 10 —Ç–æ–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –≤—ã–±–æ—Ä
        await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                               reply_markup=teacher_keyboards.build_teacher_select_written_problem(top))
        # teacher_keyboards.build_teacher_actions


@reg_callback(CALLBACK.TEACHER_CANCEL)
async def prc_teacher_cancel_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_teacher_cancel_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(query.message)


async def forward_discussion_and_start_checking(chat_id, message_id, student, problem, teacher):
    logger.debug('forward_discussion_and_start_checking')
    await bot.edit_message_text_ig(chat_id=chat_id, message_id=message_id,
                                   text=f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})\n"
                                        f"–®–∫–æ–ª—å–Ω–∏–∫ {student.token} {student.surname} {student.name}\n"
                                        f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                   reply_markup=None)
    discussion = WrittenQueue.get_discussion(student.id, problem.id)
    for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        forward_success = False
        if row['chat_id'] and row['tg_msg_id']:
            try:
                await bot.forward_message(chat_id, row['chat_id'], row['tg_msg_id'])
                forward_success = True
            except aiogram.utils.exceptions.TelegramAPIError:
                await bot.send_message(chat_id=chat_id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ...')
        if forward_success:
            pass
        elif row['text']:
            await bot.send_message(chat_id=chat_id, text=row['text'])
        elif row['attach_path']:
            # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
            path = row['attach_path'].replace('/web/vmsh179bot/vmsh179bot/', '')
            file, _, ext = path.rpartition('.')
            if ext and ext.lower() in ('jpg', 'png'):
                input_file = types.input_file.InputFile(path)
                await bot.send_photo(chat_id=chat_id, photo=input_file)
            elif ext.lower() == 'txt':
                text = open(row['attach_path'], 'r', encoding='utf-8').read()
                await bot.send_message(chat_id=chat_id, text=text)
            else:
                # –•–º... –°—Ç—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    await bot.send_document(chat_id=chat_id, document=types.input_file.InputFile(path))
                except:
                    pass
    State.set_by_user_id(teacher.id, STATE.TEACHER_IS_CHECKING_TASK, problem.id, last_teacher_id=teacher.id,
                         last_student_id=student.id)
    await bot.send_message(chat_id=chat_id,
                           text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n'
                                '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏ –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª—é—Å)',
                           reply_markup=teacher_keyboards.build_written_task_checking_verdict(student, problem))


@reg_callback(CALLBACK.WRITTEN_TASK_SELECTED)
async def prc_written_task_selected_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_selected_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    chat_id = query.message.chat.id
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    await bot.answer_callback_query_ig(query.id)
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    is_unlocked = WrittenQueue.mark_being_checked(student.id, problem.id, teacher.id)
    if not is_unlocked:
        await bot.send_message(chat_id=chat_id, text='–≠—Ç—É –∑–∞–¥–∞—á—É —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å.')
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        await process_regular_message(query.message)
        return
    await forward_discussion_and_start_checking(chat_id, query.message.message_id, student, problem, teacher)


@reg_callback(CALLBACK.WRITTEN_TASK_OK)
async def prc_written_task_ok_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_ok_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT.SOLVED, None, RES_TYPE.WRITTEN)
    WrittenQueue.delete_from_queue(student.id, problem.id)
    await bot.answer_callback_query_ig(query.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'üëç –û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! '
                                f'–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
                                f'/recheck_{student.token}_{problem.id}',
                           parse_mode='HTML')
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    student_chat_id = User.get_by_id(student.id).chat_id
    try:
        discussion = WrittenQueue.get_discussion(student.id, problem.id)
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∞
        last_pup_post = max([rn for rn in range(len(discussion)) if discussion[rn]['teacher_id'] is None] + [-2])
        teacher_comments = discussion[last_pup_post + 1:]
        if not teacher_comments:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!",
                                   disable_notification=True)
        else:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!\n"
                                        f"–í–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                                        f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                   disable_notification=True)
            for row in teacher_comments:
                # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
                if row['chat_id'] and row['tg_msg_id']:
                    await bot.copy_message(student_chat_id, row['chat_id'], row['tg_msg_id'],
                                           disable_notification=True)
                elif row['text']:
                    await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
                elif row['attach_path']:
                    # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                    input_file = types.input_file.InputFile(row['attach_path'])
                    await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
            await bot.send_message(chat_id=student_chat_id,
                                   text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                                   disable_notification=True)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student_chat_id}\n{e}')
    await process_regular_message(query.message)


@reg_callback(CALLBACK.WRITTEN_TASK_BAD)
async def prc_written_task_bad_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_bad_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT.WRONG_ANSWER, None, RES_TYPE.WRITTEN)
    db.delete_plus(student_id, problem.id, VERDICT.WRONG_ANSWER)
    WrittenQueue.delete_from_queue(student.id, problem.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'‚ùå –≠—Ö, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –º–∏–Ω—É—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} '
                                f'—à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
                                f'/recheck_{student.token}_{problem.id}',
                           parse_mode='HTML')

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —à–∫–æ–ª—å–Ω–∏–∫—É
    student_chat_id = User.get_by_id(student.id).chat_id
    try:
        discussion = WrittenQueue.get_discussion(student.id, problem.id)
        await bot.send_message(chat_id=student_chat_id,
                               text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:\n"
                                    f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
                                    f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                               disable_notification=True)
        for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
            # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            if row['chat_id'] and row['tg_msg_id']:
                try:
                    await bot.copy_message(student_chat_id, row['chat_id'], row['tg_msg_id'],
                                           disable_notification=True)
                except aiogram.utils.exceptions.BadRequest as e:
                    logger.error(f'–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ –æ—Ç—Ñ–æ—Ä–≤–∞—Ä–¥–∏–ª–æ—Å—å... {student_chat_id}\n{e}')
            elif row['text']:
                await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
            elif row['attach_path']:
                # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                input_file = types.input_file.InputFile(row['attach_path'])
                await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
        await bot.send_message(chat_id=student_chat_id,
                               text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                               disable_notification=True)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student_chat_id}\n{e}')
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(query.message)


@reg_callback(CALLBACK.GET_QUEUE_TOP)
async def prc_get_queue_top_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_queue_top_callback')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    top = Waitlist.top(1)
    if not top:
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ, —Ç–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º.
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        await bot.answer_callback_query_ig(query.id)
        await prc_teacher_select_action(query.message, teacher)
        return

    student = User.get_by_id(top[0]['student_id'])
    problem = Problem.get_by_id(top[0]['problem_id'])
    State.set_by_user_id(teacher.id, STATE.TEACHER_ACCEPTED_QUEUE, oral_problem_id=problem.id,
                         last_student_id=student.id)
    Waitlist.leave(student.id)

    params = {
        'studentId': student.id,
        'teacherId': teacher.id,
        'problemId': problem.id,
        'displayName': f"{student.name} {student.surname}"
    }
    student_link = WHITEBOARD_LINK.format(urlencode(params))
    params['displayName'] = f"{teacher.name} {teacher.middlename} {teacher.surname}"
    teacher_link = WHITEBOARD_LINK.format(urlencode(params))
    # –í–æ–æ–±—â–µ —à–∫–æ–ª—å–Ω–∏–∫ –º–æ–≥ —É—Å–ø–µ—Ç—å –ø—Ä–æ–≥–Ω–∞—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–º—É –ø–∏—Å–∞—Ç—å
    try:
        await bot.send_message(chat_id=student.chat_id,
                               text=f"<b>–î–æ –≤–∞—Å –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å</b> –Ω–∞ —Å–¥–∞—á—É –∑–∞–¥–∞—á–∏\n{problem}\n"
                                    f"<b><a href=\"{student_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>.",
                               reply_markup=types.ReplyKeyboardRemove(),
                               parse_mode='HTML')
        State.set_by_user_id(student.id, STATE.STUDENT_IS_IN_CONFERENCE, oral_problem_id=problem.id,
                             last_teacher_id=teacher.id)
        await bot.send_message(chat_id=student.chat_id, text="–ù–∞–∂–º–∏—Ç–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é.",
                               reply_markup=teacher_keyboards.build_student_in_conference(),
                               parse_mode='HTML')
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
        # –°–Ω–∏–º–∞–µ–º —Å–æ —à–∫–æ–ª—å–Ω–∏–∫–∞ —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    else:
        await bot.answer_callback_query_ig(query.id, show_alert=True)
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"<b>–í–∞—à —É—á–µ–Ω–∏–∫: {student}.\n"
                                    f"{problem}.\n"
                                    f"<a href=\"{teacher_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>",
                               parse_mode='HTML')
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(message=query.message)


@reg_callback(CALLBACK.INS_ORAL_PLUSSES)
async def prc_ins_oral_plusses(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_ins_oral_plusses')
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    await bot.send_message(chat_id=teacher.chat_id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —à–∫–æ–ª—å–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–º–∏–ª–∏–∏)")
    await bot.answer_callback_query_ig(query.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_WRITES_STUDENT_NAME)


@reg_callback(CALLBACK.SET_VERDICT)
async def prc_set_verdict_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_set_verdict_callback')
    state = State.get_by_user_id(teacher.id)
    problem_id = state['oral_problem_id']
    # TODO !!!
    if problem_id is None:
        logger.info("WAT problem_id is None")
        return
    problem = Problem.get_by_id(problem_id)
    verdict = int(query.data.split('_')[1])
    student_id = state['last_student_id']
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    await bot.answer_callback_query_ig(query.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    db.add_result(student_id, problem_id, problem.level, problem.lesson, teacher.id, verdict, '', RES_TYPE.ZOOM)
    await process_regular_message(query.message)


@reg_callback(CALLBACK.STUDENT_SELECTED)
async def prc_student_selected_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_student_selected_callback')
    _, student_id = query.data.split('_')
    student_id = int(student_id)
    student = User.get_by_id(student_id)
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None,
                                   text=f"–í–Ω–æ—Å–∏–º –ø–ª—é—Å–∏–∫–∏ —à–∫–æ–ª—å–Ω–∏–∫—É:\n"
                                        f"{student.surname} {student.name} {student.token} —É—Ä–æ–≤–µ–Ω—å {student.level}")
    await bot.send_message(chat_id=query.message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(plus_ids=set(), minus_ids=set(), student=student,
                                                                                          online=teacher.online))
    State.set_by_user_id(teacher.id, STATE.TEACHER_WRITES_STUDENT_NAME, last_student_id=student.id)
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.ADD_OR_REMOVE_ORAL_PLUS)
async def prc_add_or_remove_oral_plus_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_add_or_remove_oral_plus_callback')
    _, problem_id, plus_ids, minus_ids = query.data.split('_')
    problem_id = int(problem_id)
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    # TODO
    if problem_id in plus_ids:
        plus_ids.discard(problem_id)
        minus_ids.add(problem_id)
    elif problem_id in minus_ids:
        minus_ids.discard(problem_id)
    else:
        plus_ids.add(problem_id)
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=teacher_keyboards.build_verdict_for_oral_problems(plus_ids=plus_ids, minus_ids=minus_ids,
                                                                                                          student=student, online=teacher.online))
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.FINISH_ORAL_ROUND)
async def prc_finish_oral_round_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_finish_oral_round_callback')
    _, plus_ids, minus_ids = query.data.split('_')
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    if not student:
        teacher_message = await bot.send_message(chat_id=query.message.chat.id,
                                                 text=f"–ß—Ç–æ-—Ç–æ –≤ –±–æ—Ç–µ —Å–ª–æ–º–∞–ª–æ—Å—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω. :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await bot.answer_callback_query_ig(query.id)
        State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
        await process_regular_message(teacher_message)
        return

    pluses = [Problem.get_by_id(prb_id) for prb_id in plus_ids]
    minuses = [Problem.get_by_id(prb_id) for prb_id in minus_ids]
    human_readable_pluses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in pluses]
    human_readable_minuses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in minuses]
    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª—é—Å–∏–∫–∏
    if teacher.online == ONLINE_MODE.SCHOOL:
        res_type = RES_TYPE.SCHOOL
    else:
        res_type = RES_TYPE.ZOOM
    for problem in pluses:
        db.add_result(student_id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT.SOLVED, None, res_type)
    for problem in minuses:
        db.delete_plus(student_id, problem.id, VERDICT.WRONG_ANSWER)
        db.add_result(student_id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT.WRONG_ANSWER, None, res_type)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    text = f"–®–∫–æ–ª—å–Ω–∏–∫: {student.token} {student.surname} {student.name}\n"
    if human_readable_pluses:
        text += f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–ª—é—Å—ã ¬´+++¬ª –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}"
    if human_readable_minuses:
        text += f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –º–∏–Ω—É—Å—ã ¬´‚àí‚àí‚àí¬ª –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_minuses)}"
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                   text=text,
                                   reply_markup=None)
    # –ü–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—å–Ω–∏–∫—É –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    try:
        student_state = State.get_by_user_id(student.id)
        student_message = await bot.send_message(chat_id=student.chat_id,
                                                 text=f"–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –≤–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫–∏ –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}",
                                                 disable_notification=True)
        if student_state['state'] == STATE.STUDENT_IS_IN_CONFERENCE:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
            await process_regular_message(student_message)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
    await bot.answer_callback_query_ig(query.id)
    State.set_by_user_id(teacher.id, STATE.TEACHER_SELECT_ACTION)
    await process_regular_message(query.message)


@dispatcher.message_handler(commands=['find_student'])
async def find_student(message: types.Message):
    logger.debug('find_student')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    search = None
    if (match := re.match(r'/find_student\s+(\S+)', message.text or '')):
        search = match.group(1)
    if not search:
        await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏", )
        return
    students = sorted(
        User.all_students(),
        key=lambda user: -jaro_winkler(search.lower(), f'{user.surname} {user.name} {user.token}'.lower(), 1 / 10)
    )
    if students:
        lines = [f'f"{student.surname} {student.name} {student.level} {student.token} {ONLINE_MODE(student.online).__str__()[12:]}"'
                 for student in students[:10]]
        await bot.send_message(chat_id=message.chat.id, parse_mode="HTML", text='<pre>' + '\n'.join(lines) + '</pre>')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞')


@dispatcher.message_handler(commands=['set_online'])
async def set_online(message: types.Message):
    logger.debug('set_online')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE.TEACHER:
        return
    text = message.text.split()
    try:
        cmd, token, new_online = text
    except:
        await bot.send_message(chat_id=message.chat.id, text=f"/set_online token online/school", )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(chat_id=message.chat.id, text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω", )
    if new_online == ONLINE_MODE.ONLINE:
        student.set_online_mode(ONLINE_MODE.ONLINE)
    elif new_online == ONLINE_MODE.SCHOOL:
        student.set_online_mode(ONLINE_MODE.SCHOOL)
    else:
        return
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω",
    )
