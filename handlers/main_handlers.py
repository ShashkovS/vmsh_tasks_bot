import asyncio
import traceback
from aiogram.dispatcher.webhook import types

from helpers.consts import *
from helpers.config import logger
from helpers.obj_classes import User, State, db
from helpers.bot import bot, dispatcher, reg_state, callbacks_processors, state_processors


@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    logger.debug('start')
    user = User.get_by_chat_id(message.chat.id)
    if user:
        State.set_by_user_id(user.id, STATE.GET_USER_INFO)
    await bot.send_message(
        chat_id=message.chat.id,
        text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
    )


@reg_state(STATE.GET_USER_INFO)
async def prc_get_user_info_state(message: types.Message, user: User):
    logger.debug('prc_get_user_info_state')
    user = User.get_by_token(message.text)
    if user is None:
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîÅ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.\n"
                 "–ü–∞—Ä–æ–ª—å –±—ã–ª –≤–∞–º –≤—ã—Å–ª–∞–Ω –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ, –æ–Ω –∏–º–µ–µ—Ç –≤–∏–¥ ¬´pa1ro1¬ª",
        )
    else:
        User.set_chat_id(user, message.chat.id)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"ü§ñ –û–ö, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name} {user.surname}",
        )
        if user.type == USER_TYPE.STUDENT:
            State.set_by_user_id(user.id, STATE.GET_TASK_INFO)
        elif user.type == USER_TYPE.TEACHER:
            State.set_by_user_id(user.id, STATE.TEACHER_SELECT_ACTION)
        await process_regular_message(message)


async def prc_WTF(message: types.Message, user: User):
    logger.debug('prc_WTF')
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚ò¢Ô∏è –í—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –±–æ—Ç –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç–∞—Ü–∏–∏ :(. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞!",
    )
    logger.error(f"prc_WTF: {user!r} {message!r}")
    State.set_by_user_id(user.id, STATE.GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


@dispatcher.callback_query_handler()
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    logger.debug('inline_kb_answer_callback_handler')
    if query.message:
        user = User.get_by_chat_id(query.message.chat.id)
        if not user:
            try:
                await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
            except:
                pass  # –û—à–∏–±–∫–∏ –∑–¥–µ—Å—å –Ω–µ –≤–∞–∂–Ω—ã
            await start(query.message)
            return
        callback_type = query.data[0]  # –í–æ—Ç –∑–¥–µ—Å—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ callback –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑—É–µ—Ç—Å—è –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π
        callback_processor = callbacks_processors.get(callback_type, None)
        try:
            await callback_processor(query, user)
        except Exception as e:
            error_text = traceback.format_exc()
            logger.exception(f'SUPERSHIT_CALLBACK: {e}')
            await bot.post_logging_message(error_text)


# –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
# @dispatcher.message_handler(content_types=["any"])
async def process_regular_message(message: types.Message):
    logger.debug('process_regular_message')
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã –≤–æ–æ–±—â–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
    alarm = None
    if message.document and message.document.mime_type.startswith('image'):
        alarm = '‚ùó‚ùó‚ùó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–µ —Ñ–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–π, —Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É ¬´–°–∂–∞—Ç—å/Compress¬ª'
    elif not message.text and not message.photo:
        alarm = '‚ùó‚ùó‚ùó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ—à–µ–Ω–∏–π.'
    if alarm:
        try:
            await bot.send_message(chat_id=message.chat.id, text=alarm)
        except Exception as e:
            logger.error(f'SHIT: {e}')
        return
    # –û–∫, —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ú–æ–∂–µ—Ç —Ç–∞–∫ —Å—Ç–∞—Ç—å—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –∫—Ä—É–≥–∞–º–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
    # –ù–µ–∫–æ—Ç–æ—Ä—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ
    # message.num_processed = getattr(message, 'num_processed', 0) + 1
    user = User.get_by_chat_id(message.chat.id)
    if not user:
        cur_chat_state = STATE.GET_USER_INFO
    else:
        cur_chat_state = State.get_by_user_id(user.id)['state']

    if not message.document and not message.photo:
        db.add_message_to_log(False, message.message_id, message.chat.id, user and user.id, None, message.text, None)
    state_processor = state_processors.get(cur_chat_state, prc_WTF)
    try:
        await state_processor(message, user)
    except Exception as e:
        error_text = traceback.format_exc()
        logger.exception(f'SUPERSHIT_STATE: {e}')
        await bot.post_logging_message(error_text)
