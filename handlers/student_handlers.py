import os
import io
import datetime
import re
import asyncio
import traceback
from aiogram.dispatcher.webhook import types

from helpers.consts import *
from helpers.config import logger, config
from helpers.obj_classes import User, Problem, State, Waitlist, WrittenQueue, db
from helpers.bot import bot, reg_callback, dispatcher, reg_state
from handlers import student_keyboards
from handlers.main_handlers import process_regular_message
from helpers.checkers import ANS_CHECKER, ANS_REGEX

SOLS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../solutions')
WHITEBOARD_LINK = "https://www.shashkovs.ru/jitboard.html?{}"
GLOBALS_FOR_TEST_FUNCTION_CREATION = {
    '__builtins__': None, 're': re,
    'bool': bool, 'float': float, 'int': int, 'list': list, 'range': range, 'set': set, 'str': str, 'tuple': tuple,
    'abs': abs, 'all': all, 'any': any, 'bin': bin, 'enumerate': enumerate, 'format': format, 'len': len,
    'max': max, 'min': min, 'round': round, 'sorted': sorted, 'sum': sum, 'map': map,
}
is_py_func = re.compile(r'^\s*def \w+\s*\(')


@reg_state(STATE.GET_TASK_INFO)
async def prc_get_task_info_state(message, student: User):
    logger.debug('prc_get_task_info_state')
    # alarm = ''
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    # if message.num_processed <= 1:
    #     if message.photo or message.document:
    #         alarm = '‚ùó‚ùó‚ùó –§–∞–π–ª –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n' \
    #                 '(–ú–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–µ—à–µ–Ω–∏—è, –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á—É.)'
    #     elif message.text and len(message.text) > 20:
    #         alarm = '‚ùó‚ùó‚ùó –¢–µ–∫—Å—Ç –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n'
    #     if alarm:
    #         await bot.send_message(chat_id=message.chat.id, text=alarm,)
    #         await asyncio.sleep(3)

    slevel = f'(—É—Ä–æ–≤–µ–Ω—å ¬´{student.level.slevel}¬ª)'
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë {slevel}",
        reply_markup=student_keyboards.build_problems(Problem.last_lesson_num(), student),
    )


@reg_state(STATE.SENDING_SOLUTION)
async def prc_sending_solution_state(message: types.Message, student: User):
    logger.debug('prc_sending_solution_state')
    problem_id = State.get_by_user_id(student.id)['problem_id']
    problem = Problem.get_by_id(problem_id)
    downloaded = []
    file_name = None
    text = message.text
    if text:
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
    # for photo in message.photo:
    if message.photo:
        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    if message.document:
        if message.document.file_size > 5 * 1024 * 1024:
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 5 –º–µ–≥–∞–±–∞–π—Ç")
            return
        file_id = message.document.file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    for bin_data, filename in downloaded:
        ext = filename[filename.rfind('.') + 1:]
        cur_ts = datetime.datetime.now().isoformat().replace(':', '-')
        file_name = os.path.join(SOLS_PATH,
                                 f'{student.token} {student.surname} {student.name}',
                                 f'{problem.lesson}',
                                 f'{problem.lesson}{problem.level}_{problem.prob}{problem.item}_{cur_ts}.{ext}')
        os.makedirs(os.path.dirname(file_name), exist_ok=True)
        db.add_message_to_log(False, message.message_id, message.chat.id, student.id, None, message.text, file_name)
        with open(file_name, 'wb') as file:
            file.write(bin_data.read())
    WrittenQueue.add_to_queue(student.id, problem.id)
    WrittenQueue.add_to_discussions(student.id, problem.id, None, text, file_name, message.chat.id, message.message_id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    )
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


def check_test_ans_rate_limit(student_id: int, problem_id: int):
    logger.debug('check_test_ans_rate_limit')
    per_day, per_hour = db.check_num_answers(student_id, problem_id)
    text_to_student = None
    if per_hour >= 3:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞ –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 3 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞.'
    elif per_day >= 6:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 6 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞.'
    return text_to_student


@reg_state(STATE.SENDING_TEST_ANSWER)
async def prc_sending_test_answer_state(message: types.Message, student: User, check_functions_cache={}):
    logger.debug('prc_sending_test_answer_state')
    state = State.get_by_user_id(student.id)
    problem_id = state['problem_id']
    text_to_student = check_test_ans_rate_limit(student.id, problem_id)
    if text_to_student:
        await bot.send_message(chat_id=message.chat.id, text=text_to_student)
        await asyncio.sleep(1)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        logger.info(f'–û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å—Ç—É–¥–∞–Ω—Ç–∞: {student.id}')
        await process_regular_message(message)
        return
    problem = Problem.get_by_id(problem_id)
    student_answer = (message.text or '').strip()
    # –ï—Å–ª–∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if problem.ans_type == ANS_TYPE.SELECT_ONE and student_answer[:24] not in [ans.strip()[:24] for ans in problem.cor_ans.split(';')]:  # TODO 24!!!
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(problem.ans_validation.split(';'))}")
        return
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–∫–æ–π (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
    elif problem.ans_type != ANS_TYPE.SELECT_ONE:
        validation_regex = (problem.ans_validation and re.compile(problem.ans_validation)) or ANS_REGEX.get(problem.ans_type, None)
        if validation_regex and not validation_regex.fullmatch(student_answer):
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"‚ùå {problem.validation_error}")
            return

    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    if is_py_func.match(problem.cor_ans):
        func_code = problem.cor_ans
        func_name = re.search(r'\s*def\s+(\w+)', func_code)[1]
        if func_name in check_functions_cache:
            test_func = check_functions_cache[func_name]
        else:
            locs = {}
            # –û-–æ-–æ—á–µ–Ω—å –æ–ø–∞—Å–Ω—ã–π –∫—É—Å–æ–∫ :)
            exec(func_code, GLOBALS_FOR_TEST_FUNCTION_CREATION, locs)
            func_name, test_func = locs.popitem()
            check_functions_cache[func_name] = test_func
        result = additional_message = answer_is_correct = None
        try:
            result = test_func(student_answer)
            answer_is_correct, additional_message = result
        except Exception as e:
            error_text = f'PYCHECKER_ERROR: {traceback.format_exc()}\nFUNC_CODE:\n{func_code.replace(" ", "_")}\nENTRY:\n{student_answer}\nRESULT:\n{result!r}'
            logger.error(f'PYCHECKER_ERROR: {e}\nFUNC_CODE:\n{func_code}\nRESULT:\n{result!r}')
            await bot.post_logging_message(error_text)

        if additional_message:
            await bot.send_message(chat_id=message.chat.id, text=additional_message)
    else:
        # –ó–¥–µ—Å—å —É –Ω–∞—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —á–µ–∫–µ—Ä–∞. –¢–∏–ø–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ –¥—Ä–æ–±–µ–π —Ç–∞–º, –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π/–º–Ω–æ–∂–µ—Å—Ç–≤
        checker = ANS_CHECKER[problem.ans_type]
        correct_answer = problem.cor_ans
        if ';' not in correct_answer:
            answer_is_correct = checker(student_answer, correct_answer)
        else:
            answer_is_correct = any(checker(student_answer, one_correct) for one_correct in correct_answer.split(';'))

    if answer_is_correct:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT.SOLVED, student_answer, RES_TYPE.TEST)
        text_to_student = f"‚úîÔ∏è {problem.congrat}"
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT.WRONG_ANSWER, student_answer, RES_TYPE.TEST)
        text_to_student = f"‚ùå {problem.wrong_ans}"
    if os.environ.get('EXAM', None) == 'true':
        text_to_student = '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
    await bot.send_message(chat_id=message.chat.id, text=text_to_student)
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


@reg_state(STATE.WAIT_SOS_REQUEST)
async def prc_wait_sos_request_state(message: types.Message, student: User):
    logger.debug('prc_wait_sos_request_state')
    try:
        await bot.forward_message(config.sos_channel, message.chat.id, message.message_id)
    except:
        logger.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å SOS-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {config.sos_channel}')
    await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


@reg_state(STATE.STUDENT_IS_SLEEPING)
async def prc_student_is_sleeping_state(message: types.message, student: User):
    logger.debug('prc_student_is_sleeping_state')
    await bot.send_message(chat_id=message.chat.id,
                           text="ü§ñ –ü—Ä–∏—ë–º –∑–∞–¥–∞—á –±–æ—Ç–æ–º –æ–∫–æ–Ω—á–µ–Ω –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.\n"
                                "–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª @vmsh_179_5_6_2020 –∫—Ä—É–∂–∫–∞ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.")


@reg_state(STATE.STUDENT_IS_IN_CONFERENCE)
async def prc_student_is_in_conference_state(message: types.message, student: User):
    logger.debug('prc_student_is_in_conference_state')
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥—ë–º callback'–∞
    pass


@dispatcher.message_handler(commands=['level_novice'])
async def level_novice(message: types.Message):
    logger.debug('level_novice')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        )
        student.set_level(LEVEL.NOVICE)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await process_regular_message(message)


@dispatcher.message_handler(commands=['level_pro'])
async def level_pro(message: types.Message):
    logger.debug('level_pro')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        )
        student.set_level(LEVEL.PRO)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await process_regular_message(message)


@dispatcher.message_handler(commands=['level_expert'])
async def level_expert(message: types.Message):
    logger.debug('level_expert')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
        )
        student.set_level(LEVEL.EXPERT)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await process_regular_message(message)


@dispatcher.message_handler(commands=['sos'])
async def sos(message: types.Message):
    logger.debug('sos')
    user = User.get_by_chat_id(message.chat.id)
    if not user:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–µ–∑ –ø–∞—Ä–æ–ª—è —è –Ω–µ –∑–Ω–∞—é, –∫–æ–º—É –ø–æ–º–æ–≥–∞—Ç—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –¢–∞–∫, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ò —è –ø–µ—Ä–µ—à–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∏–≤–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
        )
        State.set_by_user_id(user.id, STATE.WAIT_SOS_REQUEST)


@reg_callback(CALLBACK.PROBLEM_SELECTED)
async def prc_problems_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_problems_selected_callback')
    student = User.get_by_chat_id(query.message.chat.id)
    state = State.get_by_user_id(student.id)
    if state.get('state', None) == STATE.STUDENT_IS_SLEEPING:
        await bot.answer_callback_query_ig(query.id)
        return
    problem_id = int(query.data[2:])
    problem = Problem.get_by_id(problem_id)
    await bot.delete_message_ig(chat_id=query.message.chat.id, message_id=query.message.message_id)
    if not problem:
        await bot.answer_callback_query_ig(query.id)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await process_regular_message(query.message)
        return
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    elif problem.prob_type == PROB_TYPE.TEST:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if problem.ans_type == ANS_TYPE.SELECT_ONE:
            await bot.send_message(chat_id=query.message.chat.id,
                                   text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                   reply_markup=student_keyboards.build_test_answers(problem.ans_validation.split(';')))
        else:
            await bot.send_message(chat_id=query.message.chat.id,
                                   text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç{problem.ans_type.descr}",
                                   reply_markup=student_keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE.SENDING_TEST_ANSWER, problem_id)
        await bot.answer_callback_query_ig(query.id)
    elif problem.prob_type in (PROB_TYPE.WRITTEN, PROB_TYPE.WRITTEN_BEFORE_ORALLY):
        await bot.send_message(chat_id=query.message.chat.id,
                               text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç üìà –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.",
                               reply_markup=student_keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE.SENDING_SOLUTION, problem_id)
        await bot.answer_callback_query_ig(query.id)
    elif problem.prob_type == PROB_TYPE.ORALLY:
        await bot.send_message(chat_id=query.message.chat.id,
                               text=f"–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞. "
                                    f"–ï—ë –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
                               # f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ. "
                               # f"–î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É. "
                               # f"\n–ö–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –≥–æ—Ç–æ–≤–æ, "
                                    f"<b>–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:"
                                    f"\n87370688149, –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: 179179</b>. "
                                    f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å: –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. "
                                    f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –≤–∞—Å –ø—É—Å—Ç—è—Ç –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. "
                                    f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
                                    f"–ö–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞, —ç—Ç–æ—Ç –ø—É—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ. "
                                    f"–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∏–º.",
                               disable_web_page_preview=True,
                               parse_mode='HTML')
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await bot.answer_callback_query_ig(query.id)
        await asyncio.sleep(5)
        await process_regular_message(query.message)

        # state = states.get_by_user_id(student.id)
        # if state['oral_problem_id'] is not None:
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\. " \
        #                                 "–î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\. " \
        #                                 "–¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\.",
        #                            parse_mode="MarkdownV2")
        #     await bot.answer_callback_query_ig(query.id)
        # else:
        #     try:
        #         await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        #     except:
        #         pass
        #     waitlist.enter(student.id, problem.id)
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞–∂–º–∏—Ç–µ `/exit_waitlist`",
        #                            parse_mode="MarkdownV2",
        #                            reply_markup=student_keyboards.build_exit_waitlist())
        #     await bot.answer_callback_query_ig(query.id)
        #     await asyncio.sleep(4)
        #     await process_regular_message(query.message)


@reg_callback(CALLBACK.LIST_SELECTED)
async def prc_list_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_list_selected_callback')
    list_num = int(query.data[2:])
    student = User.get_by_chat_id(query.message.chat.id)
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
                                reply_markup=student_keyboards.build_problems(list_num, student))
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.SHOW_LIST_OF_LISTS)
async def prc_show_list_of_lists_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_show_list_of_lists_callback')
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤:",
                                reply_markup=student_keyboards.build_lessons())
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.ONE_OF_TEST_ANSWER_SELECTED)
async def prc_one_of_test_answer_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_one_of_test_answer_selected_callback')
    state = State.get_by_user_id(student.id)
    if state.get('state', None) != STATE.SENDING_TEST_ANSWER:
        logger.info('WRONG STATE', state, STATE.SENDING_TEST_ANSWER, 'STATE.SENDING_TEST_ANSWER')
        return
    selected_answer = query.data[2:]
    await bot.send_message(chat_id=query.message.chat.id, text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    state = State.get_by_user_id(student.id)
    problem_id = state['problem_id']
    text_to_student = check_test_ans_rate_limit(student.id, problem_id)
    if text_to_student:
        await bot.send_message(chat_id=query.message.chat.id, text=text_to_student)
        await asyncio.sleep(1)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è state'–∞. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ ¬´–∑–∞–≤–∏—Å–Ω—É—Ç—å¬ª
        await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
        logger.info(f'–û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å—Ç—É–¥–∞–Ω—Ç–∞: {student.id}')
        await process_regular_message(query.message)
        return
    problem = Problem.get_by_id(problem_id)
    if problem is None:
        logger.error('–°–ª–æ–º–∞–ª—Å—è –ø—Ä–∏—ë–º –∑–∞–¥–∞—á :(')
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è state'–∞. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ ¬´–∑–∞–≤–∏—Å–Ω—É—Ç—å¬ª
        await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
        await bot.answer_callback_query_ig(query.id)
        await asyncio.sleep(1)
        await process_regular_message(query.message)
        return
    correct_answer = problem.cor_ans
    # await bot.send_message(chat_id=query.message.chat.id,
    #                        text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    if selected_answer[:24] == correct_answer[:24] or selected_answer[:24] in [ans.strip()[:24] for ans in correct_answer.split(';')]:  # TODO 24!!!
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT.SOLVED, selected_answer, RES_TYPE.TEST)
        text_to_student = f"‚úîÔ∏è {problem.congrat}"
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT.WRONG_ANSWER, selected_answer, RES_TYPE.TEST)
        text_to_student = f"‚ùå {problem.wrong_ans}"
    if os.environ.get('EXAM', None) == 'true':
        text_to_student = '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
    await bot.send_message(chat_id=query.message.chat.id, text=text_to_student)
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è state'–∞. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ ¬´–∑–∞–≤–∏—Å–Ω—É—Ç—å¬ª
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    await bot.answer_callback_query_ig(query.id)
    await asyncio.sleep(1)
    await process_regular_message(query.message)


@reg_callback(CALLBACK.CANCEL_TASK_SUBMISSION)
async def prc_cancel_task_submission_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_cancel_task_submission_callback')
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    try:
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    except:
        pass
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(query.message)


@reg_callback(CALLBACK.GET_OUT_OF_WAITLIST)
async def prc_get_out_of_waitlist_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_get_out_of_waitlist_callback')
    state = State.get_by_user_id(student.id)
    teacher = User.get_by_id(state['last_teacher_id'])
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    Waitlist.leave(student.id)
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    if teacher:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–£—á–µ–Ω–∏–∫ {student.surname} {student.name} {student.token} –∑–∞–≤–µ—Ä—à–∏–ª —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É.\n")
    await bot.answer_callback_query_ig(query.id)
    await process_regular_message(query.message)


@dispatcher.message_handler(commands=['exit_waitlist'])
async def exit_waitlist(message: types.Message):
    logger.debug('exit_waitlist')
    user = User.get_by_chat_id(message.chat.id)
    Waitlist.leave(user.id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await process_regular_message(message)
