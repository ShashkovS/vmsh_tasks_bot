import datetime
import os
import re
import io
import asyncio
import traceback
from ast import literal_eval
from operator import itemgetter
from typing import Tuple, Optional

import aiogram.utils.exceptions
from aiogram.dispatcher.webhook import types
from aiogram.utils.exceptions import BadRequest, MessageNotModified, MessageToEditNotFound, ChatNotFound

from helpers.consts import *
from helpers.config import logger, config
import db_methods as db
from helpers.features import RESULT_MODE, FEATURES, SAVE_SOL_MODE
from models import User, Problem, State, Waitlist, WrittenQueue, Result
from helpers.bot import bot, reg_callback, dispatcher, reg_state
from handlers import student_keyboards
from helpers.checkers import ANS_CHECKER, ANS_REGEX

SOLS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../solutions')
WHITEBOARD_LINK = "https://www.shashkovs.ru/jitboard.html?{}"
GLOBALS_FOR_TEST_FUNCTION_CREATION = {
    '__builtins__': None, 're': re,
    'bool': bool, 'float': float, 'int': int, 'list': list, 'range': range, 'set': set, 'str': str, 'tuple': tuple,
    'abs': abs, 'all': all, 'any': any, 'bin': bin, 'enumerate': enumerate, 'format': format, 'len': len,
    'max': max, 'min': min, 'round': round, 'sorted': sorted, 'sum': sum, 'map': map, 'literal_eval': literal_eval,
}
is_py_func = re.compile(r'^\s*def \w+\s*\(')
MAX_CALLBACK_PAYLOAD_HOOK_LIMIT = 24


async def post_problem_keyboard(chat_id: int, student: User, *, blocked=False, show_lesson=None, disable_notification=False):
    prev_keyboard = db.last_keyboard.get(student.id)
    if prev_keyboard:
        try:
            await bot.edit_message_reply_markup_ig(chat_id=prev_keyboard['chat_id'], message_id=prev_keyboard['tg_msg_id'], reply_markup=None)
        except:
            pass
    if not blocked:
        if student.online == ONLINE_MODE.ONLINE:
            online = "üì°–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æüì°"
        elif student.online == ONLINE_MODE.SCHOOL:
            online = "üè´–≤ —à–∫–æ–ª–µüè´"
        else:
            online = '?'
        text = (f"‚ùì <b>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë</b>\n"
                f"{student.name} {student.surname}\n"
                f"—É—Ä–æ–≤–µ–Ω—å ¬´{student.level.slevel}¬ª, —Ä–µ–∂–∏–º {online}\n"
                f"<a href=\"{student.level.url}\">—É—Å–ª–æ–≤–∏—è</a>, <a href=\"https://t.me/vmsh_179_5_7_2023\">–∫–∞–Ω–∞–ª –∫—Ä—É–∂–∫–∞</a>")
    else:
        text = f"ü§ñ –ü—Ä–∏—ë–º –∑–∞–¥–∞—á –±–æ—Ç–æ–º –æ–∫–æ–Ω—á–µ–Ω –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è."
    if show_lesson is None:
        show_lesson = Problem.last_lesson_num(student.level)
    keyb_msg = await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=student_keyboards.build_problems(show_lesson, student),
        disable_notification=disable_notification,
    )
    db.last_keyboard.update(student.id, keyb_msg.chat.id, keyb_msg.message_id)


async def refresh_last_student_keyboard(student: User, force=False) -> bool:
    if not student:
        return False
    prev_keyboard = db.last_keyboard.get(student.id)
    if prev_keyboard:
        try:
            updated = await bot.edit_message_reply_markup(
                chat_id=prev_keyboard['chat_id'],
                message_id=prev_keyboard['tg_msg_id'],
                reply_markup=student_keyboards.build_problems(Problem.last_lesson_num(student.level), student)
            )
            return bool(updated)
        except MessageNotModified as e:
            return True
        except MessageToEditNotFound as e:
            prev_keyboard = None
        except Exception as e:
            return False
    if not prev_keyboard and force and student.chat_id:
        await post_problem_keyboard(student.chat_id, student, disable_notification=True)
        return True
    return False


async def sleep_and_send_problems_keyboard(chat_id: int, student: User, sleep=1):
    if sleep > 0:
        await asyncio.sleep(sleep)
    await post_problem_keyboard(chat_id, student)


@reg_state(STATE.GET_TASK_INFO)
async def prc_get_task_info_state(message, student: User):
    logger.debug('prc_get_task_info_state')
    # –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ç –ø—Ä–∏–ª–µ—Ç–µ–ª —Ö–≤–æ—Å—Ç –≥–∞–ª–µ—Ä–µ–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã —É—Å–ø–µ—à–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏.
    if message.media_group_id and db.media_group.check(message.media_group_id):
        await prc_sending_solution_state(message, student)
        return
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    alarm = ''
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    if message.photo or message.document:
        alarm = '‚ùó‚ùó‚ùó –§–∞–π–ª –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n' \
                '(–ú–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–µ—à–µ–Ω–∏—è –≤ –≤–∏–¥–µ –≥–∞–ª–µ—Ä–µ–∏, –ª–∏–±–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á—É.)'
    elif message.text and len(message.text) > 20:
        alarm = '‚ùó‚ùó‚ùó –¢–µ–∫—Å—Ç –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n'
    sleep = 0
    if alarm:
        await bot.send_message(chat_id=message.chat.id, text=alarm, )
        sleep = 8
    asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student, sleep=sleep))


@reg_state(STATE.SENDING_SOLUTION)
async def prc_sending_solution_state(message: types.Message, student: User):
    logger.debug('prc_sending_solution_state')
    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π ‚Äî —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫  –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
    # —Ç–æ –∫ –Ω–∞–º –≤ –±–æ—Ç –æ–Ω–∏ –ø—Ä–∏–¥—É—Ç –≤ –≤–∏–¥–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º media_group_id.
    # –ü–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ media_group_id –∑–∞–¥–∞–Ω, —Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∫ –∫–∞–∫–æ–π –æ–Ω –∑–∞–¥–∞—á–µ,
    # –∞ –ø–æ—Ç–æ–º —É–∂–µ –±—Ä–∞—Ç—å id –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ
    next_media_group_message = False
    if message.media_group_id:
        problem_id = db.media_group.check(message.media_group_id)
        if problem_id:
            next_media_group_message = True
        else:
            problem_id = State.get_by_user_id(student.id)['problem_id']
            duplicate = db.media_group.insert(message.media_group_id, problem_id)
            # –ú–æ–≥–ª–æ —Ç–∞–∫ —Å–ª—É—á–∏—Ç—å—Å—è, —á—Ç–æ –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å –¥–æ–±–∞–≤–∏–ª–∏
            if duplicate:
                problem_id = db.media_group.check(message.media_group_id)
                next_media_group_message = True
    else:
        problem_id = State.get_by_user_id(student.id)['problem_id']
    file_name = None
    text = message.text

    if SAVE_SOL_MODE == FEATURES.SAVE_SOL_ON_DRIVE:
        try:
            downloaded = []
            if text:
                downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
            # for photo in message.photo:
            if message.photo:
                file_info = await bot.get_file(message.photo[-1].file_id)
                downloaded_file = await bot.download_file(file_info.file_path)
                filename = file_info.file_path
                downloaded.append((downloaded_file, filename))
            if message.document:
                if message.document.file_size > 5 * 1024 * 1024:
                    await bot.send_message(chat_id=message.chat.id,
                                           text=f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 5 –º–µ–≥–∞–±–∞–π—Ç")
                    return
                file_id = message.document.file_id
                file_info = await bot.get_file(file_id)
                downloaded_file = await bot.download_file(file_info.file_path)
                filename = file_info.file_path
                downloaded.append((downloaded_file, filename))
            problem = Problem.get_by_id(problem_id)
            for bin_data, filename in downloaded:
                ext = filename[filename.rfind('.') + 1:]
                cur_ts = datetime.datetime.now().isoformat().replace(':', '-')
                file_name = os.path.join(SOLS_PATH,
                                         f'{student.token} {student.surname} {student.name}',
                                         f'{problem.lesson}',
                                         f'{problem.lesson}{problem.level}_{problem.prob}{problem.item}_{cur_ts}.{ext}')
                os.makedirs(os.path.dirname(file_name), exist_ok=True)
                db.log.insert(False, message.message_id, message.chat.id, student.id, None, message.text, file_name)
                with open(file_name, 'wb') as file:
                    file.write(bin_data.read())
        except Exception as e:
            logger.exception(e)
    WrittenQueue.add_to_discussions(student.id, problem_id, None, text, file_name, message.chat.id, message.message_id)
    if not next_media_group_message:
        WrittenQueue.add_to_queue(student.id, problem_id)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É" if (problem_id > 0) else "–í–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω"
        )
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


def check_test_ans_rate_limit(student_id: int, problem_id: int):
    logger.debug('check_test_ans_rate_limit')
    per_day, per_hour = db.result.check_num_answers(student_id, problem_id)
    text_to_student = None
    if per_hour >= 3:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞ –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 3 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞.'
    elif per_day >= 6:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 6 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞.'
    return text_to_student


def run_py_func_checker(problem: Problem, student_answer: str, *, check_functions_cache={}) -> Tuple[bool, Optional[str], Optional[str]]:
    func_code = problem.cor_ans_checker
    func_name = re.search(r'\s*def\s+(\w+)', func_code)[1]
    if func_name in check_functions_cache:
        test_func = check_functions_cache[func_name]
    else:
        locs = {}
        # –û-–æ-–æ—á–µ–Ω—å –æ–ø–∞—Å–Ω—ã–π –∫—É—Å–æ–∫ :)
        exec(func_code, GLOBALS_FOR_TEST_FUNCTION_CREATION, locs)
        func_name, test_func = locs.popitem()
        check_functions_cache[func_name] = test_func
    result = additional_message = answer_is_correct = error_text = None
    try:
        result = test_func(student_answer)
        answer_is_correct, additional_message = result
    except Exception as e:
        error_text = f'PYCHECKER_ERROR: {traceback.format_exc()}\nFUNC_CODE:\n{func_code.replace(" ", "_")}\nENTRY:\n{student_answer}\nRESULT:\n{result!r}'
        logger.error(f'PYCHECKER_ERROR: {e}\nFUNC_CODE:\n{func_code}\nRESULT:\n{result!r}')
    return answer_is_correct, additional_message, error_text


@unique
class ANS_CHECK_VERDICT(IntEnum):
    INCORRECT_SELECT = -2
    VALIDATION_NOT_PASSED = -3
    RATE_LIMIT = -4
    CORRECT = 1
    WRONG = -1


def check_test_problem_answer(problem: Problem, student: Optional[User], student_answer: str, *, check_functions_cache={}) -> Tuple[
    ANS_CHECK_VERDICT, Optional[str], Optional[str]]:
    logger.debug('check_test_problem_answer')
    answer_is_correct = additional_message = error_text = None
    if student_answer is None:
        student_answer = ''

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–±–æ—Ä
    if student:  # –ü—Ä–∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        text_to_student = check_test_ans_rate_limit(student.id, problem.id) if student.type == USER_TYPE.STUDENT else None
        if text_to_student:
            return ANS_CHECK_VERDICT.RATE_LIMIT, text_to_student, error_text

    # –ï—Å–ª–∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, —Ç–æ —ç—Ç–æ ¬´–ø—Ä–æ—Å—Ç–æ–π¬ª –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π
    if problem.ans_type == ANS_TYPE.SELECT_ONE:
        student_answer_cut = student_answer.strip()[:MAX_CALLBACK_PAYLOAD_HOOK_LIMIT].strip().lower()
        if student_answer_cut in [ans.strip()[:MAX_CALLBACK_PAYLOAD_HOOK_LIMIT].strip().lower() for ans in problem.cor_ans.split(';')]:
            return ANS_CHECK_VERDICT.CORRECT, additional_message, error_text
        if student_answer_cut not in [ans.strip()[:MAX_CALLBACK_PAYLOAD_HOOK_LIMIT].strip().lower() for ans in problem.ans_validation.split(';')]:
            return ANS_CHECK_VERDICT.INCORRECT_SELECT, additional_message, error_text
        return ANS_CHECK_VERDICT.WRONG, additional_message, error_text

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–∫–æ–π (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
    validation_regex = (problem.ans_validation and re.compile(problem.ans_validation)) or ANS_REGEX.get(problem.ans_type, None)
    if validation_regex and not validation_regex.fullmatch(student_answer):
        return ANS_CHECK_VERDICT.VALIDATION_NOT_PASSED, additional_message, error_text
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    if problem.cor_ans_checker and is_py_func.match(problem.cor_ans_checker):
        answer_is_correct, additional_message, error_text = run_py_func_checker(problem, student_answer)
    else:
        # –ó–¥–µ—Å—å —É –Ω–∞—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —á–µ–∫–µ—Ä–∞. –¢–∏–ø–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —á–∏—Å–µ–ª –∏–ª–∏ –¥—Ä–æ–±–µ–π —Ç–∞–º, –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π/–º–Ω–æ–∂–µ—Å—Ç–≤
        checker = ANS_CHECKER[problem.ans_type]
        correct_answer = problem.cor_ans
        if problem.ans_type != ANS_TYPE.POLYNOMIAL:
            if ';' not in correct_answer:
                answer_is_correct = checker(student_answer, correct_answer)
            else:
                answer_is_correct = any(checker(student_answer, one_correct) for one_correct in correct_answer.split(';'))
        elif problem.ans_type == ANS_TYPE.POLYNOMIAL:
            # –ß—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –º—ã –≤—ã–¥–∞—ë–º –≤—Ö–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.
            valid, func_values = checker(student_answer)
            if not valid:
                answer_is_correct = False
                additional_message = func_values
            else:
                _, corr_func_values = checker(correct_answer)
                answer_is_correct = True
                for x, (stv, crv) in enumerate(zip(func_values, corr_func_values)):
                    if abs(stv - crv) > 1e-8:
                        answer_is_correct = False
                        additional_message = f'–ü—Ä–∏ n={x} –ø–æ–ª—É—á–∏–ª–æ—Å—å {stv}, –∞ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è {crv}'
                        break
    if answer_is_correct:
        return ANS_CHECK_VERDICT.CORRECT, additional_message, error_text
    return ANS_CHECK_VERDICT.WRONG, additional_message, error_text


async def check_answer_and_react(chat_id: int, problem: Problem, student: User, student_answer: str):
    check_verict, additional_message, error_text = check_test_problem_answer(problem, student, student_answer)
    if error_text:
        await bot.post_logging_message(error_text)
    if additional_message:
        await bot.send_message(chat_id=chat_id, text=additional_message)
    if check_verict == ANS_CHECK_VERDICT.INCORRECT_SELECT:
        await bot.send_message(chat_id=chat_id, text=f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(problem.ans_validation.split(';'))}")
    elif check_verict == ANS_CHECK_VERDICT.VALIDATION_NOT_PASSED:
        await bot.send_message(chat_id=chat_id, text=f"‚ùå {problem.validation_error}")
    elif check_verict == ANS_CHECK_VERDICT.RATE_LIMIT:
        logger.info(f'–û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student.id}')
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(chat_id, student))
    else:
        if check_verict == ANS_CHECK_VERDICT.CORRECT:
            Result.add(student, problem, None, VERDICT.SOLVED, student_answer, RES_TYPE.TEST)
            text_to_student = f"‚úîÔ∏è {problem.congrat}"
        # elif check_verict == ANS_CHECK_VERDICT.WRONG:
        else:
            Result.add(student, problem, None, VERDICT.WRONG_ANSWER, student_answer, RES_TYPE.TEST)
            text_to_student = f"‚ùå {problem.wrong_ans}"
        if RESULT_MODE == FEATURES.RESULT_AFTER:
            text_to_student = '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
        await bot.send_message(chat_id=chat_id, text=text_to_student)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(chat_id, student))


@reg_state(STATE.SENDING_TEST_ANSWER)
async def prc_sending_test_answer_state(message: types.Message, student: User, check_functions_cache={}):
    logger.debug('prc_sending_test_answer_state')
    state = State.get_by_user_id(student.id)
    problem_id = state['problem_id']
    problem = Problem.get_by_id(problem_id)
    student_answer = (message.text or '').strip()
    await check_answer_and_react(message.chat.id, problem, student, student_answer)


@reg_state(STATE.WAIT_SOS_REQUEST)
async def prc_wait_sos_request_state(message: types.Message, student: User):
    logger.debug('prc_wait_sos_request_state')
    state = State.get_by_user_id(student.id)
    problem_id = state["problem_id"]
    if problem_id:
        problem = Problem.get_by_id(problem_id)
        problem_text = f"{problem}"
    else:
        problem_text = ""
    try:
        await bot.send_message(config.sos_channel, parse_mode="HTML",
                               text=f'<pre>{student.surname} {student.name} {student.level} {student.token} {ONLINE_MODE(student.online).__str__()[12:]}</pre>{problem_text}')
        await bot.forward_message(config.sos_channel, message.chat.id, message.message_id)
    except:
        logger.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å SOS-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {config.sos_channel}')
    await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


@reg_state(STATE.STUDENT_IS_SLEEPING)
async def prc_student_is_sleeping_state(message: types.message, student: User):
    logger.debug('prc_student_is_sleeping_state')
    if student.level == LEVEL.NOVICE:
        channel = '@vmsh_179_5_7_2023'
    elif student.level == LEVEL.PRO:
        channel = '@vmsh_179_5_7_2023'
    elif student.level == LEVEL.EXPERT:
        channel = '@vmsh_179_5_7_2023'
    elif student.level == LEVEL.GR8:
        channel = '@vmsh_179_8_2022'
    await bot.send_message(chat_id=message.chat.id if message else student.chat_id,
                           text="ü§ñ –ü—Ä–∏—ë–º –∑–∞–¥–∞—á –±–æ—Ç–æ–º –æ–∫–æ–Ω—á–µ–Ω –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.\n"
                                f"–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª {channel} –∫—Ä—É–∂–∫–∞ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.")


@reg_state(STATE.STUDENT_IS_IN_CONFERENCE)
async def prc_student_is_in_conference_state(message: types.message, student: User):
    logger.debug('prc_student_is_in_conference_state')
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥—ë–º callback'–∞
    pass


@dispatcher.message_handler(commands=['level_novice'])
async def level_novice(message: types.Message):
    logger.debug('level_novice')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        student.set_level(LEVEL.NOVICE)
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. "
                 "–£—Å–ø–µ—Ö–æ–≤ –≤ –∑–∞–Ω—è—Ç–∏—è—Ö! "
                 "–í–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ @vmsh_179_5_7_2023_chat.",
        )
        if State.get_by_user_id(student.id)['state'] != STATE.STUDENT_IS_SLEEPING:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


@dispatcher.message_handler(commands=['level_pro'])
async def level_pro(message: types.Message):
    logger.debug('level_pro')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö. "
                 "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∑–∞–¥–∞—á, —Ç–æ –ª—É—á—à–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É ¬´–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö¬ª. "
                 "–≠—Ç–æ –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ!",
        )
        student.set_level(LEVEL.PRO)
        if State.get_by_user_id(student.id)['state'] != STATE.STUDENT_IS_SLEEPING:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


@dispatcher.message_handler(commands=['level_expert'])
async def level_expert(message: types.Message):
    logger.debug('level_expert')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. "
                 "–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏—Ç–µ —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é :) "
                 "–£—Å–ø–µ—Ö–æ–≤!",
        )
        student.set_level(LEVEL.EXPERT)
        if State.get_by_user_id(student.id)['state'] != STATE.STUDENT_IS_SLEEPING:
            State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


# @dispatcher.message_handler(commands=['level_gr8'])
# async def level_expert(message: types.Message):
#     logger.debug('level_gr8')
#     student = User.get_by_chat_id(message.chat.id)
#     if student:
#         message = await bot.send_message(
#             chat_id=message.chat.id,
#             text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –≤–æ—Å—å–º–æ–≥–æ –∫–ª–∞—Å—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è ¬´–æ–ø—ã—Ç–Ω—ã—Ö¬ª —É—á–µ–Ω–∏–∫–æ–≤ 8 –∫–ª–∞—Å—Å–∞. "
#                  "–ï—Å–ª–∏ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ–≤–∞—Ç–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≥—Ä—É–ø–ø—ã ¬´–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ¬ª –∏–ª–∏ ¬´–≠–∫—Å–ø–µ—Ä—Ç—ã¬ª. "
#                  "–í–æ—Ç –∫–∞–Ω–∞–ª –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞: @vmsh_179_8_2022. "
#                  "–ê –≤–æ—Ç –≥—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π: @vmsh_179_8_2022_chat",
#         )
#         student.set_level(LEVEL.GR8)
#         if State.get_by_user_id(student.id)['state'] != STATE.STUDENT_IS_SLEEPING:
#             State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
#         asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, student))


@dispatcher.message_handler(commands=['sos'])
async def sos(message: types.Message):
    logger.debug('sos')
    user = User.get_by_chat_id(message.chat.id)
    if not user:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–µ–∑ –ø–∞—Ä–æ–ª—è —è –Ω–µ –∑–Ω–∞—é, –∫–æ–º—É –ø–æ–º–æ–≥–∞—Ç—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
        )
    else:
        sos_message = await bot.send_message(chat_id=message.chat.id,
                                             text="ü§ñ –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?",
                                             reply_markup=student_keyboards.build_student_sos_actions())
        bot.delete_messages_after(sos_message, 30)


@reg_callback(CALLBACK.PROBLEM_SOS)
async def prc_problem_sos_callback(query: types.CallbackQuery, student: User):
    await bot.delete_message_ig(chat_id=query.message.chat.id, message_id=query.message.message_id)
    problem_sos_message = await bot.send_message(chat_id=query.message.chat.id,
                                                 text="ü§ñ –ü–æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å‚ùì",
                                                 reply_markup=student_keyboards.build_problems(
                                                     Problem.last_lesson_num(student.level), student,
                                                     is_sos_question=True))
    bot.delete_messages_after(problem_sos_message, 30)
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.OTHER_SOS)
async def prc_problems_other_sos_callback(query: types.CallbackQuery, student: User):
    await bot.delete_message_ig(chat_id=query.message.chat.id, message_id=query.message.message_id)
    State.set_by_user_id(student.id, STATE.WAIT_SOS_REQUEST)
    await bot.send_message(chat_id=query.message.chat.id,
                           text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
                           reply_markup=student_keyboards.build_cancel_task_submission())
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.SOS_PROBLEM_SELECTED)
async def prc_problem_sos_problem_selected_callback(query: types.CallbackQuery, student: User):
    problem_id = int(query.data[2:])
    problem = Problem.get_by_id(problem_id)
    State.set_by_user_id(student.id, STATE.WAIT_SOS_REQUEST, problem_id=problem_id)
    await bot.delete_message_ig(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç üìà –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.",
                           reply_markup=student_keyboards.build_cancel_task_submission())
    State.set_by_user_id(student.id, STATE.SENDING_SOLUTION,
                         -problem_id)  # -problem_id - –í–û–ü–†–û–° –ø–æ –∑–∞–¥–∞—á–µ, –∞ –Ω–µ –†–ï–®–ï–ù–ò–ï
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.PROBLEM_SELECTED)
async def prc_problems_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_problems_selected_callback')
    state = State.get_by_user_id(student.id)
    if state and state['state'] == STATE.STUDENT_IS_SLEEPING:
        await bot.answer_callback_query_ig(query.id)
        return
    problem_id = int(query.data[2:])
    problem = Problem.get_by_id(problem_id)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π-—Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    await bot.delete_message_ig(chat_id=query.message.chat.id, message_id=query.message.message_id)
    db.last_keyboard.delete(student.id)
    if not problem:
        await bot.answer_callback_query_ig(query.id)
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student))
        return
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    elif problem.prob_type == PROB_TYPE.TEST:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if problem.ans_type == ANS_TYPE.SELECT_ONE:
            await bot.send_message(chat_id=query.message.chat.id,
                                   text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                   reply_markup=student_keyboards.build_test_answers(problem))
        else:
            answer_recommendation = problem.validation_error or f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç{problem.ans_type.descr}'
            await bot.send_message(chat_id=query.message.chat.id,
                                   text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n{answer_recommendation}",
                                   reply_markup=student_keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE.SENDING_TEST_ANSWER, problem_id)
        await bot.answer_callback_query_ig(query.id)
    elif problem.prob_type in (PROB_TYPE.WRITTEN, PROB_TYPE.WRITTEN_BEFORE_ORALLY):
        await bot.send_message(chat_id=query.message.chat.id,
                               text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç üìà –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.",
                               reply_markup=student_keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE.SENDING_SOLUTION, problem_id)
        await bot.answer_callback_query_ig(query.id)
    elif problem.prob_type == PROB_TYPE.ORALLY:
        instruction_url = r'https://t.me/vmsh_179_5_7_2023/78'
        hint = ''
        if problem.level != LEVEL.EXPERT:
            conf_id = '87196763644'
            passcode = '179179179'
        else:
            conf_id = '87196763644'
            passcode = '179179179'
            # conf_id = '83052557082'
            # passcode = 'exp179'
            # hint = '–ö–û–ù–§–ï–†–ï–ù–¶–ò–Ø –ö–ê–ö–ê–Ø –ë–´–õ–ê –†–ê–ù–¨–®–ï!\n'
        text = (
            f"{hint}"
            f"–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞. "
            # f"–ï—ë –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
            # f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ. "
            # f"–î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É. "
            # f"\n–ö–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –≥–æ—Ç–æ–≤–æ, "
            f"\n<b>–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é (¬´–í–æ–π—Ç–∏¬ª –≤ zoom)"
            f"\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: <pre>{conf_id}</pre>"
            f"\n–∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <pre>{passcode}</pre></b>"
            f"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å:"
            f"\n<b><pre>{student.level} {student.surname} {student.name}</pre></b>"
            f"\n(<a href=\"{instruction_url}\">–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>)"
            f"\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –≤–∞—Å –ø—É—Å—Ç—è—Ç –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. "
            f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
            f"–ö–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞, —ç—Ç–æ—Ç –ø—É—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ. "
            f"–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∏–º."
        )
        await bot.send_message(chat_id=query.message.chat.id,
                               text=text,
                               disable_web_page_preview=True,
                               parse_mode='HTML')
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        await bot.answer_callback_query_ig(query.id)
        asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student, sleep=5))

        # state = states.get_by_user_id(student.id)
        # if state['oral_problem_id'] is not None:
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\. " \
        #                                 "–î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\. " \
        #                                 "–¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\.",
        #                            parse_mode="MarkdownV2")
        #     await bot.answer_callback_query_ig(query.id)
        # else:
        #     try:
        #         await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        #     except:
        #         pass
        #     waitlist.enter(student.id, problem.id)
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞–∂–º–∏—Ç–µ `/exit_waitlist`",
        #                            parse_mode="MarkdownV2",
        #                            reply_markup=student_keyboards.build_exit_waitlist())
        #     await bot.answer_callback_query_ig(query.id)
        #     asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student, sleep=4))


#         # await bot.send_message(chat_id=query.message.chat.id,
#         #                        text=f"–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞. "
#         #                             f"–ï—ë –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
#         #                        # f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ. "
#         #                        # f"–î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É. "
#         #                        # f"\n–ö–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –≥–æ—Ç–æ–≤–æ, "
#         #                             f"<b>–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:"
#         #                             f"\n83488340620, –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: 179179179</b>. "
#         #                             f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å: –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. "
#         #                             f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –≤–∞—Å –ø—É—Å—Ç—è—Ç –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. "
#         #                             f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
#         #                             f"–ö–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞, —ç—Ç–æ—Ç –ø—É—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ. "
#         #                             f"–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∏–º.",
#         #                        disable_web_page_preview=True,
#         #                        parse_mode='HTML')
#         # State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
#         # await bot.answer_callback_query_ig(query.id)
#         # asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student, sleep=5))
#
#         state = State.get_by_user_id(student.id)
#         if state['oral_problem_id'] is not None:
#             await bot.send_message(chat_id=query.message.chat.id,
#                                    text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\. " \
#                                         "–î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\. " \
#                                         "–¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\.",
#                                    parse_mode="MarkdownV2")
#             await bot.answer_callback_query_ig(query.id)
#         else:
#             try:
#                 await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
#             except:
#                 pass
#             Waitlist.enter(student.id, problem.id)
#             await bot.send_message(chat_id=query.message.chat.id,
#                                    text="–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞–∂–º–∏—Ç–µ `/exit_waitlist`",
#                                    parse_mode="MarkdownV2",
#                                    reply_markup=student_keyboards.build_exit_waitlist())
#             await bot.answer_callback_query_ig(query.id)
#             asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student, sleep=4))


@reg_callback(CALLBACK.LIST_SELECTED)
async def prc_list_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_list_selected_callback')
    lesson = int(query.data[2:])
    student = User.get_by_chat_id(query.message.chat.id)
    await post_problem_keyboard(student.chat_id, student, show_lesson=lesson)
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.SHOW_LIST_OF_LISTS)
async def prc_show_list_of_lists_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_show_list_of_lists_callback')
    await bot.edit_message_text_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                   text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤:",
                                   reply_markup=student_keyboards.build_lessons(student.level))
    await bot.answer_callback_query_ig(query.id)


@reg_callback(CALLBACK.ONE_OF_TEST_ANSWER_SELECTED)
async def prc_one_of_test_answer_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_one_of_test_answer_selected_callback')
    problem = selected_answer = problem_id = None
    splitted = query.data.split('_', maxsplit=2)
    if len(splitted) == 3:
        _, problem_id, selected_answer = splitted
        problem = Problem.get_by_id(problem_id)

    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
    await bot.answer_callback_query_ig(query.id)

    if problem is None:
        logger.error('–°–ª–æ–º–∞–ª—Å—è –ø—Ä–∏—ë–º –∑–∞–¥–∞—á :(')
        State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
        # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è state'–∞. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ ¬´–∑–∞–≤–∏—Å–Ω—É—Ç—å¬ª
        asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student))
        return

    await bot.send_message(chat_id=query.message.chat.id, text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")

    await check_answer_and_react(query.message.chat.id, problem, student, selected_answer)


@reg_callback(CALLBACK.CANCEL_TASK_SUBMISSION)
async def prc_cancel_task_submission_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_cancel_task_submission_callback')
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    try:
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    except:
        pass
    await bot.answer_callback_query_ig(query.id)
    asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student, sleep=0))


@reg_callback(CALLBACK.GET_OUT_OF_WAITLIST)
async def prc_get_out_of_waitlist_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_get_out_of_waitlist_callback')
    state = State.get_by_user_id(student.id)
    teacher = User.get_by_id(state['last_teacher_id'])
    await bot.edit_message_reply_markup_ig(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                           reply_markup=None)
    Waitlist.leave(student.id)
    db.delete_url_by_user_id(student.id)
    try:
        await bot.unpin_chat_message(chat_id=query.message.chat.id)
    except BadRequest:
        pass
    State.set_by_user_id(student.id, STATE.GET_TASK_INFO)
    if teacher:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–£—á–µ–Ω–∏–∫ {student.surname} {student.name} {student.token} –∑–∞–≤–µ—Ä—à–∏–ª —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É.\n")
    await bot.answer_callback_query_ig(query.id)
    asyncio.create_task(sleep_and_send_problems_keyboard(query.message.chat.id, student))


@dispatcher.message_handler(commands=['exit_waitlist'])
async def exit_waitlist(message: types.Message):
    logger.debug('exit_waitlist')
    user = User.get_by_chat_id(message.chat.id)
    Waitlist.leave(user.id)
    db.delete_url_by_user_id(user.id)
    try:
        await bot.unpin_chat_message(chat_id=message.chat.id)
    except BadRequest:
        pass
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, user))


@dispatcher.message_handler(commands=['set_zoom'])
async def set_zoom(message: types.Message):
    logger.debug('set_zoom')
    user = User.get_by_chat_id(message.chat.id)
    zoom_conf = re.search(r'https://[\w?=._/-]*zoom[\w?=._/-]*', message.text or '')
    if not zoom_conf:
        await bot.send_message(chat_id=message.chat.id,
                               text="–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.")
        await bot.send_message(chat_id=message.chat.id,
                               text="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ zoom –∏ —Å—Ç–∞—Ä—Ç—É–µ—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.<br>–í –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∑–µ–ª—ë–Ω—ã–π —â–∏—Ç. –ö–ª–∏–∫–∞–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.<br>–ó–∞–ø—É—Å–∫–∞–µ—Ç–µ –≤–º—à-—Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏ –ø–∏—à–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π –≤–∏–¥–∞ <br><code>/set_zoom https://us02web.zoom.us/j/123?pwd=ABC</code>",
                               parse_mode="HTML")
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, user, sleep=5))
    else:
        zoom_url = zoom_conf.group()
        db.add_zoom_conf(user.id, zoom_url)
        msg = await bot.send_message(chat_id=message.chat.id,
                                     text=f"–û–∂–∏–¥–∞–π—Ç–µ –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ {zoom_url}.\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit_waitlist –¥–ª—è –æ—Ç–º–µ–Ω—ã.", )
        await bot.pin_chat_message(chat_id=message.chat.id, message_id=msg.message_id)
        asyncio.create_task(sleep_and_send_problems_keyboard(message.chat.id, user, sleep=5))


@dispatcher.message_handler(commands=['results'])
async def students_my_results(message: types.Message):
    logger.debug('students_my_results')
    student = User.get_by_chat_id(message.chat.id)
    rows = db.result.list_all_student_results(student.id)
    if rows:
        lessons = {row['lesson'] for row in rows}
        for lesson in sorted(lessons):
            lines = [f'{row["ts"][5:16]} ' \
                     f'{row["lesson"]:02}{row["level"]}.{row["prob"]:02}{row["item"]:<1} ' \
                     f'{VERDICT_DECODER[row["verdict"]]} ' \
                     f'{row["answer"] if row["answer"] is not None else ""}'
                     for row in rows
                     if row['lesson'] == lesson
                     ]
            for i in range(0, len(lines), 20):
                try:
                    await bot.send_message(chat_id=message.chat.id, parse_mode="HTML", text='<pre>' + '\n'.join(lines[i:i + 20]) + '</pre>')
                except aiogram.utils.exceptions.MessageIsTooLong:
                    pass
    else:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏ (–∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)')


@dispatcher.message_handler(commands=['game_info'])
async def game_info(message: types.Message):
    """–û—Ç—á—ë—Ç –ø–æ –ø–ª—é—Å–∞–º –∏ –º–∏–Ω—É—Å–∞–º –≤ –∏–≥—Ä–µ.
    –°–º. —Ç–∞–∫–∂–µ get_game_data.
    """
    logger.debug('game_info')
    student = User.get_by_chat_id(message.chat.id)
    if student and student.type == USER_TYPE.TEACHER:
        try:
            cmd, token = message.text.split()
            student = User.get_by_token(token)
        except:
            pass
    if not student:
        return
    command = db.game.get_student_command(student.id)
    student_command = command['command_id'] if command else -1
    solved = db.result.get_student_solved(student.id, Problem.last_lesson_num(student.level))  # ts, title
    payments = db.game.get_student_payments(student.id, student_command)  # ts, amount
    chests_rows = db.game.get_student_chests(student.id, student_command)
    # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ–ø–ª–∞—Ç event'—ã
    events = []
    for paym in payments:
        events.append([paym['ts'], '$', -paym['amount'], None])
    for chest in chests_rows:
        events.append([chest['ts'], 'üóù', chest['bonus'], None])
    used_titles = set()
    scores_count = {}
    for solv in solved:
        if '‚ö°' not in solv['title']:
            continue
        score, clear_title = solv['title'].split('‚ö°')
        score = int(score) if score.strip().isdecimal() else 2
        if clear_title in used_titles:
            continue
        else:
            used_titles.add(clear_title)
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –≤ 1.5 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –±–∞–ª–ª–æ–≤
        if solv['level'] == LEVEL.NOVICE and command['level'] == LEVEL.PRO:
            score = int(round(score / 1.5))
        elif solv['level'] == LEVEL.NOVICE and command['level'] == LEVEL.EXPERT:
            score = int(round(score / 2))
        elif solv['level'] == LEVEL.PRO and command['level'] == LEVEL.EXPERT:
            score = int(round(score / 1.5))
        events.append([solv['ts'], '+', score, clear_title.strip()])
    events.sort(key=itemgetter(0))
    report = []
    tp = None
    for ts, tp, diff, title in events:
        if tp == '$':
            report.append(f'{diff:+}‚ö°')
            for try_amount in range(-diff, 11):
                if scores_count.get(try_amount, 0) <= 0:
                    continue
                scores_count[try_amount] -= 1
                rem = try_amount + diff
                if rem > 0:
                    scores_count[rem] = scores_count.get(rem, 0) + 1
                break
        elif tp == 'üóù':
            report.append(f'{diff:+}‚ö° –∑–∞ —Å—É–Ω–¥—É–∫')
            scores_count[diff] = scores_count.get(diff, 0) + 1
        elif tp == '+':
            report.append(f'{diff:+}‚ö° –∑–∞ –∑–∞–¥–∞—á—É ¬´{title}¬ª')
            scores_count[diff] = scores_count.get(diff, 0) + 1
        if tp != '$':
            report.append('    ' + ', '.join(f'{dif}‚ö°√ó{cnt}' for (dif, cnt) in sorted(scores_count.items()) if cnt > 0))
    if tp == '$':
        report.append('    ' + ', '.join(f'{dif}‚ö°√ó{cnt}' for (dif, cnt) in sorted(scores_count.items()) if cnt > 0))
    report = '\n'.join(report)
    for i in range(0, len(report), 4000):
        await bot.send_message(chat_id=message.chat.id, parse_mode="HTML", text=f'<pre>{report[i:i + 4000]}</pre>')
        await asyncio.sleep(1 / 20)
