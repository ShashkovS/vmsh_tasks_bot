import os
import io
import datetime
import re
import asyncio
import traceback
import aiogram
from aiogram.dispatcher.webhook import types
from urllib.parse import urlencode

from consts import *
from config import logger, config
from obj_classes import User, Problem, State, Waitlist, WrittenQueue, Result, db
from bot import bot, bot_edit_message_text, bot_edit_message_reply_markup, bot_answer_callback_query, bot_post_logging_message
import keyboards

SOLS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'solutions')
WHITEBOARD_LINK = "https://www.shashkovs.ru/jitboard.html?{}"
GLOBALS_FOR_TEST_FUNCTION_CREATION = {
    '__builtins__': None, 're': re,
    'bool': bool, 'float': float, 'int': int, 'list': list, 'range': range, 'set': set, 'str': str, 'tuple': tuple,
    'abs': abs, 'all': all, 'any': any, 'bin': bin, 'enumerate': enumerate, 'format': format, 'len': len,
    'max': max, 'min': min, 'round': round, 'sorted': sorted, 'sum': sum, 'map': map,
}


async def prc_get_user_info_state(message: types.Message, user: User):
    logger.debug('prc_get_user_info_state')
    user = User.get_by_token(message.text)
    if user is None:
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîÅ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.\n"
                 "–ü–∞—Ä–æ–ª—å –±—ã–ª –≤–∞–º –≤—ã—Å–ª–∞–Ω –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ, –æ–Ω –∏–º–µ–µ—Ç –≤–∏–¥ ¬´pa1ro1¬ª",
        )
    else:
        User.set_chat_id(user, message.chat.id)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"ü§ñ –û–ö, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name} {user.surname}",
        )
        if user.type == USER_TYPE_STUDENT:
            State.set_by_user_id(user.id, STATE_GET_TASK_INFO)
        elif user.type == USER_TYPE_TEACHER:
            State.set_by_user_id(user.id, STATE_TEACHER_SELECT_ACTION)
        await process_regular_message(message)


async def prc_WTF(message: types.Message, user: User):
    logger.debug('prc_WTF')
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚ò¢Ô∏è –í—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –±–æ—Ç –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç–∞—Ü–∏–∏ :(. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞!",
    )
    logger.error(f"prc_WTF: {user!r} {message!r}")
    State.set_by_user_id(user.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


async def prc_teacher_select_action(message: types.Message, teacher: User):
    logger.debug('prc_teacher_select_action')
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                           reply_markup=keyboards.build_teacher_actions())


async def prc_get_task_info_state(message, student: User):
    logger.debug('prc_get_task_info_state')
    # alarm = ''
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    # if message.num_processed <= 1:
    #     if message.photo or message.document:
    #         alarm = '‚ùó‚ùó‚ùó –§–∞–π–ª –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n' \
    #                 '(–ú–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–µ—à–µ–Ω–∏—è, –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞—á—É.)'
    #     elif message.text and len(message.text) > 20:
    #         alarm = '‚ùó‚ùó‚ùó –¢–µ–∫—Å—Ç –ù–ï –ü–†–ò–ù–Ø–¢ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!\n'
    #     if alarm:
    #         await bot.send_message(chat_id=message.chat.id, text=alarm,)
    #         await asyncio.sleep(3)

    slevel = '(—É—Ä–æ–≤–µ–Ω—å ¬´–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–µ¬ª)' if student.level == STUDENT_PRO else '(—É—Ä–æ–≤–µ–Ω—å ¬´–ù–∞—á–∏–Ω–∞—é—â–∏–µ¬ª)'
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë {slevel}",
        reply_markup=keyboards.build_problems(Problem.last_lesson_num(), student),
    )


async def prc_sending_solution_state(message: types.Message, student: User):
    logger.debug('prc_sending_solution_state')
    problem_id = State.get_by_user_id(student.id)['problem_id']
    problem = Problem.get_by_id(problem_id)
    downloaded = []
    file_name = None
    text = message.text
    if text:
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
        downloaded.append((io.BytesIO(text.encode('utf-8')), 'text.txt'))
    # for photo in message.photo:
    if message.photo:
        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    if message.document:
        if message.document.file_size > 5 * 1024 * 1024:
            await bot.send_message(chat_id=message.chat.id,
                                   text=f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 5 –º–µ–≥–∞–±–∞–π—Ç")
            return
        file_id = message.document.file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        filename = file_info.file_path
        downloaded.append((downloaded_file, filename))
    for bin_data, filename in downloaded:
        ext = filename[filename.rfind('.') + 1:]
        cur_ts = datetime.datetime.now().isoformat().replace(':', '-')
        file_name = os.path.join(SOLS_PATH,
                                 f'{student.token} {student.surname} {student.name}',
                                 f'{problem.lesson}',
                                 f'{problem.lesson}{problem.level}_{problem.prob}{problem.item}_{cur_ts}.{ext}')
        os.makedirs(os.path.dirname(file_name), exist_ok=True)
        db.add_message_to_log(False, message.message_id, message.chat.id, student.id, None, message.text, file_name)
        with open(file_name, 'wb') as file:
            file.write(bin_data.read())
    WrittenQueue.add_to_queue(student.id, problem.id)
    WrittenQueue.add_to_discussions(student.id, problem.id, None, text, file_name, message.chat.id, message.message_id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    )
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


async def prc_teacher_is_checking_task_state(message: types.Message, teacher: User):
    logger.debug('prc_teacher_is_checking_task_state')
    problem_id = State.get_by_user_id(teacher.id)['problem_id']
    student_id = State.get_by_user_id(teacher.id)['last_student_id']
    WrittenQueue.add_to_discussions(student_id, problem_id, teacher.id, message.text, None, message.chat.id,
                                    message.message_id)
    await bot.send_message(chat_id=message.chat.id, text="–û–∫, –∑–∞–ø–∏—Å–∞–ª")


def check_test_ans_rate_limit(student_id: int, problem_id: int):
    logger.debug('check_test_ans_rate_limit')
    per_day, per_hour = db.check_num_answers(student_id, problem_id)
    text_to_student = None
    if per_hour >= 3:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞ –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 3 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞.'
    elif per_day >= 6:
        text_to_student = 'üí§‚åõ –í —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 6 –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞.'
    return text_to_student


async def prc_sending_test_answer_state(message: types.Message, student: User, check_functions_cache={}):
    logger.debug('prc_sending_test_answer_state')
    state = State.get_by_user_id(student.id)
    problem_id = state['problem_id']
    text_to_student = check_test_ans_rate_limit(student.id, problem_id)
    if text_to_student:
        await bot.send_message(chat_id=message.chat.id, text=text_to_student)
        await asyncio.sleep(1)
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        logger.info(f'–û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å—Ç—É–¥–∞–Ω—Ç–∞: {student.id}')
        await process_regular_message(message)
        return
    problem = Problem.get_by_id(problem_id)
    student_answer = (message.text or '').strip()
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–∫–æ–π (–µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
    if problem.ans_type == ANS_TYPE_SELECT_ONE and student_answer not in problem.cor_ans.split(';'):
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(problem.ans_validation.split(';'))}")
        return
    elif problem.ans_type != ANS_TYPE_SELECT_ONE and problem.ans_validation and not re.fullmatch(problem.ans_validation,
                                                                                                 student_answer):
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚ùå {problem.validation_error}")
        return

    answer_is_correct = False
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    # TODO —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    if problem.cor_ans_checker == 'py_func':
        func_code = problem.cor_ans
        func_name = re.search(r'\s*def\s+(\w+)', func_code)[1]
        if func_name in check_functions_cache:
            test_func = check_functions_cache[func_name]
        else:
            locs = {}
            # –û-–æ-–æ—á–µ–Ω—å –æ–ø–∞—Å–Ω—ã–π –∫—É—Å–æ–∫ :)
            exec(func_code, GLOBALS_FOR_TEST_FUNCTION_CREATION, locs)
            func_name, test_func = locs.popitem()
            check_functions_cache[func_name] = test_func
        result = additional_message = answer_is_correct = None
        try:
            result = test_func(student_answer)
            answer_is_correct, additional_message = result
        except Exception as e:
            error_text = f'PYCHECKER_ERROR: {traceback.format_exc()}\nFUNC_CODE:\n{func_code.replace(" ", "_")}\nENTRY:\n{student_answer}\nRESULT:\n{result!r}'
            logger.error(f'PYCHECKER_ERROR: {e}\nFUNC_CODE:\n{func_code}\nRESULT:\n{result!r}')
            await bot_post_logging_message(error_text)

        if additional_message:
            await bot.send_message(chat_id=message.chat.id, text=additional_message)
    else:
        # –£—Ä–∞! –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ã—á–Ω–æ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ!
        correct_answer = re.sub(r'[^–∞-—è—ëa-z0-9+\-()*/^;]+', ' ', problem.cor_ans.lower())
        student_answer = re.sub(r'[^–∞-—è—ëa-z0-9+\-()*/^]+', ' ', student_answer.lower())
        if ';' not in correct_answer:
            answer_is_correct = (student_answer == correct_answer)
        else:
            correct_answer = list(ans.strip() for ans in correct_answer.split(';'))
            answer_is_correct = student_answer in correct_answer

    if answer_is_correct:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_SOLVED, student_answer, RES_TYPE_TEST)
        text_to_student = f"‚úîÔ∏è {problem.congrat}"
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_WRONG_ANSWER, student_answer, RES_TYPE_TEST)
        text_to_student = f"‚ùå {problem.wrong_ans}"
    if os.environ.get('EXAM', None) == 'true':
        text_to_student = '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
    await bot.send_message(chat_id=message.chat.id, text=text_to_student)
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)


async def prc_wait_sos_request_state(message: types.Message, student: User):
    logger.debug('prc_wait_sos_request_state')
    try:
        await bot.forward_message(config.sos_channel, message.chat.id, message.message_id)
    except:
        logger.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å SOS-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {config.sos_channel}')
    await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await asyncio.sleep(1)
    await process_regular_message(message)

async def prc_teacher_accepted_queue(message: types.message, teacher: User):
    logger.debug('prc_teacher_accepted_queue')
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    await bot.send_message(chat_id=message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=keyboards.build_verdict(plus_ids=set(), minus_ids=set(), student=student))


async def prc_teacher_writes_student_name_state(message: types.message, teacher: User):
    logger.debug('prc_teacher_writes_student_name_state')
    name_to_find = message.text or ''
    await bot.send_message(chat_id=message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–¥–∞—á",
                           reply_markup=keyboards.build_select_student(name_to_find))


async def prc_student_is_sleeping_state(message: types.message, student: User):
    logger.debug('prc_student_is_sleeping_state')
    await bot.send_message(chat_id=message.chat.id,
                           text="ü§ñ –ü—Ä–∏—ë–º –∑–∞–¥–∞—á –±–æ—Ç–æ–º –æ–∫–æ–Ω—á–µ–Ω –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.\n"
                                "–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª @vmsh_179_5_6_2020 –∫—Ä—É–∂–∫–∞ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.")


async def prc_student_is_in_conference_state(message: types.message, student: User):
    logger.debug('prc_student_is_in_conference_state')
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥—ë–º callback'–∞
    pass



state_processors = {
    STATE_GET_USER_INFO: prc_get_user_info_state,
    STATE_GET_TASK_INFO: prc_get_task_info_state,
    STATE_SENDING_SOLUTION: prc_sending_solution_state,
    STATE_SENDING_TEST_ANSWER: prc_sending_test_answer_state,
    STATE_WAIT_SOS_REQUEST: prc_wait_sos_request_state,
    STATE_STUDENT_IS_IN_CONFERENCE: prc_student_is_in_conference_state,
    STATE_STUDENT_IS_SLEEPING: prc_student_is_sleeping_state,
    STATE_TEACHER_SELECT_ACTION: prc_teacher_select_action,
    STATE_TEACHER_IS_CHECKING_TASK: prc_teacher_is_checking_task_state,
    STATE_TEACHER_ACCEPTED_QUEUE: prc_teacher_accepted_queue,
    STATE_TEACHER_WRITES_STUDENT_NAME: prc_teacher_writes_student_name_state,
}


async def process_regular_message(message: types.Message):
    logger.debug('process_regular_message')
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã –≤–æ–æ–±—â–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
    alarm = None
    if message.document and message.document.mime_type.startswith('image'):
        alarm = '‚ùó‚ùó‚ùó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–µ —Ñ–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–π, —Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É ¬´–°–∂–∞—Ç—å/Compress¬ª'
    elif not message.text and not message.photo:
        alarm = '‚ùó‚ùó‚ùó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ—à–µ–Ω–∏–π.'
    if alarm:
        try:
            await bot.send_message(chat_id=message.chat.id, text=alarm)
        except Exception as e:
            logger.error(f'SHIT: {e}')
        return
    # –û–∫, —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ú–æ–∂–µ—Ç —Ç–∞–∫ —Å—Ç–∞—Ç—å—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –∫—Ä—É–≥–∞–º–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
    # –ù–µ–∫–æ—Ç–æ—Ä—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ
    # message.num_processed = getattr(message, 'num_processed', 0) + 1
    user = User.get_by_chat_id(message.chat.id)
    if not user:
        cur_chat_state = STATE_GET_USER_INFO
    else:
        cur_chat_state = State.get_by_user_id(user.id)['state']

        if not message.document and not message.photo:
            db.add_message_to_log(False, message.message_id, message.chat.id, user.id, None, message.text, None)
    state_processor = state_processors.get(cur_chat_state, prc_WTF)
    try:
        await state_processor(message, user)
    except Exception as e:
        error_text = traceback.format_exc()
        logger.error(f'SUPERSHIT: {e}')
        await bot_post_logging_message(error_text)


async def start(message: types.Message):
    logger.debug('start')
    user = User.get_by_chat_id(message.chat.id)
    if user:
        State.set_by_user_id(user.id, STATE_GET_USER_INFO)
    await bot.send_message(
        chat_id=message.chat.id,
        text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞—á –Ω–∞ –í–ú–®. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
    )


async def recheck(message: types.Message):
    logger.debug('recheck')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE_TEACHER:
        return
    match = re.fullmatch(r'/recheck(?:_xd5fqk)?[\s_]+([a-zA-Z0-9]+)[\s_]+(\d+)([–∞-—è])\.(\d+)([–∞-—è]?)\s*',
                         message.text or '')
    if not match:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n¬´/recheck token problem¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´/recheck aa9bb4 3–Ω.11–∞¬ª",
        )
    else:
        token, lst, level, prob, item = match.groups()
        student = User.get_by_token(token)
        problem = Problem.get_by_key(level, int(lst), int(prob), item)
        if not student:
            await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not problem:
            await bot.send_message(chat_id=message.chat.id, text=f"ü§ñ –ó–∞–¥–∞—á–∞ {lst}{level}.{prob}{item} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if student and problem:
            message = await bot.send_message(chat_id=message.chat.id, text=f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            await forward_discussion_and_start_checking(message.chat.id, message.message_id, student, problem, teacher)


async def set_student_level(message: types.Message):
    logger.debug('set_student_level')
    teacher = User.get_by_chat_id(message.chat.id)
    if not teacher or teacher.type != USER_TYPE_TEACHER:
        return
    text = message.text.split()
    try:
        cmd, token, new_level = text
    except:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"/set_level token –Ω/–ø",
        )
        return
    student = User.get_by_token(token)
    if not student:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –Ω–µ –Ω–∞–π–¥–µ–Ω",
        )
    if new_level == STUDENT_NOVICE:
        student.set_level(STUDENT_NOVICE)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
    elif new_level == STUDENT_PRO:
        student.set_level(STUDENT_PRO)
        stud_msg = "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö"
    else:
        return
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {token} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω",
    )
    if student.chat_id:
        try:
            await bot.send_message(chat_id=student.chat_id, text=stud_msg)
        except:
            pass


async def level_novice(message: types.Message):
    logger.debug('level_novice')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        )
        student.set_level(STUDENT_NOVICE)
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(message)


async def level_pro(message: types.Message):
    logger.debug('level_pro')
    student = User.get_by_chat_id(message.chat.id)
    if student:
        message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        )
        student.set_level(STUDENT_PRO)
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(message)


async def sos(message: types.Message):
    logger.debug('sos')
    user = User.get_by_chat_id(message.chat.id)
    if not user:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –ü—Ä–∏–≤–µ—Ç! –ë–µ–∑ –ø–∞—Ä–æ–ª—è —è –Ω–µ –∑–Ω–∞—é, –∫–æ–º—É –ø–æ–º–æ–≥–∞—Ç—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å",
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="ü§ñ –¢–∞–∫, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ò —è –ø–µ—Ä–µ—à–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∏–≤–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
        )
        State.set_by_user_id(user.id, STATE_WAIT_SOS_REQUEST)


async def prc_problems_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_problems_selected_callback')
    student = User.get_by_chat_id(query.message.chat.id)
    state = State.get_by_user_id(student.id)
    if state.get('state', None) == STATE_STUDENT_IS_SLEEPING:
        await bot_answer_callback_query(query.id)
        return
    problem_id = int(query.data[2:])
    problem = Problem.get_by_id(problem_id)
    if not problem:
        await bot_answer_callback_query(query.id)
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await process_regular_message(query.message)
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    if problem.prob_type == PROB_TYPE_TEST:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if problem.ans_type == ANS_TYPE_SELECT_ONE:
            await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                        reply_markup=keyboards.build_test_answers(problem.ans_validation.split(';')))
        else:
            await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç{ANS_HELP_DESCRIPTIONS[problem.ans_type]}",
                                        reply_markup=keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE_SENDING_TEST_ANSWER, problem_id)
        await bot_answer_callback_query(query.id)
    elif problem.prob_type in (PROB_TYPE_WRITTEN, PROB_TYPE_WRITTEN_BEFORE_ORALLY):
        await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {problem}.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç üìà –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.",
                                    reply_markup=keyboards.build_cancel_task_submission())
        State.set_by_user_id(student.id, STATE_SENDING_SOLUTION, problem_id)
        await bot_answer_callback_query(query.id)
    elif problem.prob_type == PROB_TYPE_ORALLY:
        await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=f"–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞. "
                                         f"–ï—ë –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
                                    # f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ. "
                                    # f"–î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É. "
                                    # f"\n–ö–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –≥–æ—Ç–æ–≤–æ, "
                                         f"<b>–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ zoom-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:"
                                         f"\n87370688149, –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: 179179</b>. "
                                         f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å: –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. "
                                         f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –≤–∞—Å –ø—É—Å—Ç—è—Ç –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. "
                                         f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. "
                                         f"–ö–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —É—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞, —ç—Ç–æ—Ç –ø—É—Ç—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–Ω–æ–≤–æ. "
                                         f"–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–º—É, –Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∏–º.",
                                    disable_web_page_preview=True,
                                    parse_mode='HTML')
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await bot_answer_callback_query(query.id)
        await asyncio.sleep(5)
        await process_regular_message(query.message)

        # state = states.get_by_user_id(student.id)
        # if state['oral_problem_id'] is not None:
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\. " \
        #                                 "–î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\. " \
        #                                 "–¢–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\.",
        #                            parse_mode="MarkdownV2")
        #     await bot_answer_callback_query(query.id)
        # else:
        #     try:
        #         await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        #     except:
        #         pass
        #     waitlist.enter(student.id, problem.id)
        #     await bot.send_message(chat_id=query.message.chat.id,
        #                            text="–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É\.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞–∂–º–∏—Ç–µ `/exit_waitlist`",
        #                            parse_mode="MarkdownV2",
        #                            reply_markup=keyboards.build_exit_waitlist())
        #     await bot_answer_callback_query(query.id)
        #     await asyncio.sleep(4)
        #     await process_regular_message(query.message)


async def prc_list_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_list_selected_callback')
    list_num = int(query.data[2:])
    student = User.get_by_chat_id(query.message.chat.id)
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
                                reply_markup=keyboards.build_problems(list_num, student))
    await bot_answer_callback_query(query.id)


async def prc_show_list_of_lists_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_show_list_of_lists_callback')
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–∫–æ–≤:",
                                reply_markup=keyboards.build_lessons())
    await bot_answer_callback_query(query.id)


async def prc_one_of_test_answer_selected_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_one_of_test_answer_selected_callback')
    state = State.get_by_user_id(student.id)
    if state.get('state', None) != STATE_SENDING_TEST_ANSWER:
        logger.info('WRONG STATE', state, STATE_SENDING_TEST_ANSWER, 'STATE_SENDING_TEST_ANSWER')
        return
    selected_answer = query.data[2:]
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    await bot.send_message(chat_id=query.message.chat.id, text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    state = State.get_by_user_id(student.id)
    problem_id = state['problem_id']
    text_to_student = check_test_ans_rate_limit(student.id, problem_id)
    if text_to_student:
        await bot.send_message(chat_id=query.message.chat.id, text=text_to_student)
        await asyncio.sleep(1)
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        logger.info(f'–û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ —Å—Ç—É–¥–∞–Ω—Ç–∞: {student.id}')
        await process_regular_message(query.message)
        return
    problem = Problem.get_by_id(problem_id)
    if problem is None:
        logger.error('–°–ª–æ–º–∞–ª—Å—è –ø—Ä–∏—ë–º –∑–∞–¥–∞—á :(')
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
        await bot_answer_callback_query(query.id)
        await asyncio.sleep(1)
        await process_regular_message(query.message)
        return
    correct_answer = problem.cor_ans
    # await bot.send_message(chat_id=query.message.chat.id,
    #                        text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {selected_answer}.")
    if selected_answer == correct_answer:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_SOLVED, selected_answer, RES_TYPE_TEST)
        text_to_student = f"‚úîÔ∏è {problem.congrat}"
    else:
        db.add_result(student.id, problem.id, problem.level, problem.lesson, None, VERDICT_WRONG_ANSWER, selected_answer, RES_TYPE_TEST)
        text_to_student = f"‚ùå {problem.wrong_ans}"
    if os.environ.get('EXAM', None) == 'true':
        text_to_student = '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
    await bot.send_message(chat_id=query.message.chat.id, text=text_to_student)
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    await bot_answer_callback_query(query.id)
    await asyncio.sleep(1)
    await process_regular_message(query.message)


async def prc_cancel_task_submission_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_cancel_task_submission_callback')
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    # await bot.send_message(
    #     chat_id=message.chat.id,
    #     text="‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë",
    #     reply_markup=keyboards.build_problems(problems.last_lesson, user),
    # )
    await bot_edit_message_text(message_id=query.message.message_id, chat_id=query.message.chat.id,
                                text="‚ùì –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å –µ—ë",
                                reply_markup=keyboards.build_problems(Problem.last_lesson_num(), student))
    await bot_answer_callback_query(query.id)


async def prc_get_written_task_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_written_task_callback')
    # –¢–∞–∫, –ø—Ä–µ–ø–æ–¥ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    top = WrittenQueue.take_top(teacher.id)
    if not top:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í—Å–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
        await bot_answer_callback_query(query.id)
        await process_regular_message(query.message)
    else:
        # –î–∞—ë–º –ø—Ä–µ–ø–æ–¥—É 10 —Ç–æ–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –≤—ã–±–æ—Ä
        await bot.send_message(chat_id=teacher.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                               reply_markup=keyboards.build_teacher_select_written_problem(top))
        # keyboards.build_teacher_actions


async def prc_teacher_cancel_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_teacher_cancel_callback')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def forward_discussion_and_start_checking(chat_id, message_id, student, problem, teacher):
    logger.debug('forward_discussion_and_start_checking')
    await bot_edit_message_text(chat_id=chat_id, message_id=message_id,
                                text=f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title})\n"
                                     f"–®–∫–æ–ª—å–Ω–∏–∫ {student.token} {student.surname} {student.name}\n"
                                     f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                reply_markup=None)
    discussion = WrittenQueue.get_discussion(student.id, problem.id)
    for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        forward_success = False
        if row['chat_id'] and row['tg_msg_id']:
            try:
                await bot.forward_message(chat_id, row['chat_id'], row['tg_msg_id'])
                forward_success = True
            except aiogram.utils.exceptions.TelegramAPIError:
                await bot.send_message(chat_id=chat_id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ...')
        if forward_success:
            pass
        elif row['text']:
            await bot.send_message(chat_id=chat_id, text=row['text'])
        elif row['attach_path']:
            # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
            path = row['attach_path'].replace('/web/vmsh179bot/vmsh179bot/', '')
            file, _, ext = path.rpartition('.')
            if ext and ext.lower() in ('jpg', 'png'):
                input_file = types.input_file.InputFile(path)
                await bot.send_photo(chat_id=chat_id, photo=input_file)
            elif ext.lower() == 'txt':
                text = open(row['attach_path'], 'r', encoding='utf-8').read()
                await bot.send_message(chat_id=chat_id, text=text)
            else:
                # –•–º... –°—Ç—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    await bot.send_document(chat_id=chat_id, document=types.input_file.InputFile(path))
                except:
                    pass
    State.set_by_user_id(teacher.id, STATE_TEACHER_IS_CHECKING_TASK, problem.id, last_teacher_id=teacher.id,
                         last_student_id=student.id)
    await bot.send_message(chat_id=chat_id,
                           text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n'
                                '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç üì∏ –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª—é—Å)',
                           reply_markup=keyboards.build_written_task_checking_verdict(student, problem))


async def prc_written_task_selected_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_selected_callback')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    chat_id = query.message.chat.id
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    await bot_answer_callback_query(query.id)
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    is_unlocked = WrittenQueue.mark_being_checked(student.id, problem.id, teacher.id)
    if not is_unlocked:
        await bot.send_message(chat_id=chat_id, text='–≠—Ç—É –∑–∞–¥–∞—á—É —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å.')
        State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
        await process_regular_message(query.message)
        return
    await forward_discussion_and_start_checking(chat_id, query.message.message_id, student, problem, teacher)


async def prc_written_task_ok_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_ok_callback')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_SOLVED, None, RES_TYPE_WRITTEN)
    WrittenQueue.delete_from_queue(student.id, problem.id)
    await bot_answer_callback_query(query.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'üëç –û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} —à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n'
                                f'<pre>/recheck {student.token} {problem.lesson}{problem.level}.{problem.prob}{problem.item}</pre>',
                           parse_mode='HTML')
    State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    student_chat_id = User.get_by_id(student.id).chat_id
    try:
        discussion = WrittenQueue.get_discussion(student.id, problem.id)
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∞
        last_pup_post = max([rn for rn in range(len(discussion)) if discussion[rn]['teacher_id'] is None] + [-2])
        teacher_comments = discussion[last_pup_post + 1:]
        if not teacher_comments:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!",
                                   disable_notification=True)
        else:
            await bot.send_message(chat_id=student_chat_id,
                                   text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫!\n"
                                        f"–í–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                                        f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                                   disable_notification=True)
            for row in teacher_comments:
                # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
                if row['chat_id'] and row['tg_msg_id']:
                    await bot.forward_message(student_chat_id, row['chat_id'], row['tg_msg_id'],
                                              disable_notification=True)
                elif row['text']:
                    await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
                elif row['attach_path']:
                    # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                    input_file = types.input_file.InputFile(row['attach_path'])
                    await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
            await bot.send_message(chat_id=student_chat_id,
                                   text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                                   disable_notification=True)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student_chat_id}\n{e}')
    await process_regular_message(query.message)


async def prc_written_task_bad_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_written_task_bad_callback')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    _, student_id, problem_id = query.data.split('_')
    student = User.get_by_id(int(student_id))
    problem = Problem.get_by_id(int(problem_id))
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.add_result(student.id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_WRONG_ANSWER, None, RES_TYPE_WRITTEN)
    db.delete_plus(student_id, problem.id, VERDICT_WRONG_ANSWER)
    WrittenQueue.delete_from_queue(student.id, problem.id)
    await bot.send_message(chat_id=query.message.chat.id,
                           text=f'‚ùå –≠—Ö, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –º–∏–Ω—É—Å–∏–∫ –∑–∞ –∑–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} '
                                f'—à–∫–æ–ª—å–Ω–∏–∫—É {student.token} {student.surname} {student.name}! –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n'
                                f'<pre>/recheck {student.token} {problem.lesson}{problem.level}.{problem.prob}{problem.item}</pre>',
                           parse_mode='HTML')

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —à–∫–æ–ª—å–Ω–∏–∫—É
    student_chat_id = User.get_by_id(student.id).chat_id
    try:
        discussion = WrittenQueue.get_discussion(student.id, problem.id)
        await bot.send_message(chat_id=student_chat_id,
                               text=f"–ó–∞–¥–∞—á—É {problem.lesson}{problem.level}.{problem.prob}{problem.item} ({problem.title}) –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:\n"
                                    f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
                                    f"‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á",
                               disable_notification=True)
        for row in discussion[-20:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
            # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ forward'—ã. –ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç–µ–ª—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            if row['chat_id'] and row['tg_msg_id']:
                try:
                    await bot.forward_message(student_chat_id, row['chat_id'], row['tg_msg_id'],
                                              disable_notification=True)
                except aiogram.utils.exceptions.BadRequest as e:
                    logger.error(f'–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ –æ—Ç—Ñ–æ—Ä–≤–∞—Ä–¥–∏–ª–æ—Å—å... {student_chat_id}\n{e}')
            elif row['text']:
                await bot.send_message(chat_id=student_chat_id, text=row['text'], disable_notification=True)
            elif row['attach_path']:
                # TODO Pass a file_id as String to send a photo that exists on the Telegram servers (recommended)
                input_file = types.input_file.InputFile(row['attach_path'])
                await bot.send_photo(chat_id=student_chat_id, photo=input_file, disable_notification=True)
        await bot.send_message(chat_id=student_chat_id,
                               text='‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü\n',
                               disable_notification=True)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student_chat_id}\n{e}')
    State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def prc_get_queue_top_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_get_queue_top_callback')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    top = Waitlist.top(1)
    if not top:
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ, —Ç–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º.
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        await bot_answer_callback_query(query.id)
        await prc_teacher_select_action(query.message, teacher)
        return

    student = User.get_by_id(top[0]['student_id'])
    problem = Problem.get_by_id(top[0]['problem_id'])
    State.set_by_user_id(teacher.id, STATE_TEACHER_ACCEPTED_QUEUE, oral_problem_id=problem.id,
                         last_student_id=student.id)
    Waitlist.leave(student.id)

    params = {
        'studentId': student.id,
        'teacherId': teacher.id,
        'problemId': problem.id,
        'displayName': f"{student.name} {student.surname}"
    }
    student_link = WHITEBOARD_LINK.format(urlencode(params))
    params['displayName'] = f"{teacher.name} {teacher.middlename} {teacher.surname}"
    teacher_link = WHITEBOARD_LINK.format(urlencode(params))
    # –í–æ–æ–±—â–µ —à–∫–æ–ª—å–Ω–∏–∫ –º–æ–≥ —É—Å–ø–µ—Ç—å –ø—Ä–æ–≥–Ω–∞—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–º—É –ø–∏—Å–∞—Ç—å
    try:
        await bot.send_message(chat_id=student.chat_id,
                               text=f"<b>–î–æ –≤–∞—Å –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å</b> –Ω–∞ —Å–¥–∞—á—É –∑–∞–¥–∞—á–∏\n{problem}\n"
                                    f"<b><a href=\"{student_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>.",
                               reply_markup=types.ReplyKeyboardRemove(),
                               parse_mode='HTML')
        State.set_by_user_id(student.id, STATE_STUDENT_IS_IN_CONFERENCE, oral_problem_id=problem.id,
                             last_teacher_id=teacher.id)
        await bot.send_message(chat_id=student.chat_id, text="–ù–∞–∂–º–∏—Ç–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é.",
                               reply_markup=keyboards.build_student_in_conference(),
                               parse_mode='HTML')
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
        # –°–Ω–∏–º–∞–µ–º —Å–æ —à–∫–æ–ª—å–Ω–∏–∫–∞ —Å—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏
        State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    else:
        await bot_answer_callback_query(query.id, show_alert=True)
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"<b>–í–∞—à —É—á–µ–Ω–∏–∫: {student}.\n"
                                    f"{problem}.\n"
                                    f"<a href=\"{teacher_link}\">–í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</a></b>",
                               parse_mode='HTML')
    await bot_answer_callback_query(query.id)
    await process_regular_message(message=query.message)


async def prc_ins_oral_plusses(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_ins_oral_plusses')
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    await bot.send_message(chat_id=teacher.chat_id,
                           text=f"–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —à–∫–æ–ª—å–Ω–∏–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–º–∏–ª–∏–∏)")
    await bot_answer_callback_query(query.id)
    State.set_by_user_id(teacher.id, STATE_TEACHER_WRITES_STUDENT_NAME)


async def prc_set_verdict_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_set_verdict_callback')
    state = State.get_by_user_id(teacher.id)
    problem_id = state['oral_problem_id']
    # TODO !!!
    if problem_id is None:
        logger.info("WAT problem_id is None")
        return
    problem = Problem.get_by_id(problem_id)
    verdict = int(query.data.split('_')[1])
    student_id = state['last_student_id']
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    await bot_answer_callback_query(query.id)
    State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    db.add_result(student_id, problem_id, problem.level, problem.lesson, teacher.id, verdict, '', RES_TYPE_ZOOM)
    await process_regular_message(query.message)


async def prc_get_out_of_waitlist_callback(query: types.CallbackQuery, student: User):
    logger.debug('prc_get_out_of_waitlist_callback')
    state = State.get_by_user_id(student.id)
    teacher = User.get_by_id(state['last_teacher_id'])
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=None)
    Waitlist.leave(student.id)
    State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
    if teacher:
        await bot.send_message(chat_id=teacher.chat_id,
                               text=f"–£—á–µ–Ω–∏–∫ {student.surname} {student.name} {student.token} –∑–∞–≤–µ—Ä—à–∏–ª —É—Å—Ç–Ω—É—é —Å–¥–∞—á—É.\n")
    await bot_answer_callback_query(query.id)
    await process_regular_message(query.message)


async def prc_student_selected_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_student_selected_callback')
    _, student_id = query.data.split('_')
    student_id = int(student_id)
    student = User.get_by_id(student_id)
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None,
                                text=f"–í–Ω–æ—Å–∏–º –ø–ª—é—Å–∏–∫–∏ —à–∫–æ–ª—å–Ω–∏–∫—É:\n"
                                     f"{student.surname} {student.name} {student.token} —É—Ä–æ–≤–µ–Ω—å {student.level}")
    await bot.send_message(chat_id=query.message.chat.id,
                           text="–û—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª—é—Å–∏–∫–∏ (–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
                           reply_markup=keyboards.build_verdict(plus_ids=set(), minus_ids=set(), student=student))
    State.set_by_user_id(teacher.id, STATE_TEACHER_WRITES_STUDENT_NAME, last_student_id=student.id)
    await bot_answer_callback_query(query.id)


async def prc_add_or_remove_oral_plus_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_add_or_remove_oral_plus_callback')
    _, problem_id, plus_ids, minus_ids = query.data.split('_')
    problem_id = int(problem_id)
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    # TODO
    if problem_id in plus_ids:
        plus_ids.discard(problem_id)
        minus_ids.add(problem_id)
    elif problem_id in minus_ids:
        minus_ids.discard(problem_id)
    else:
        plus_ids.add(problem_id)
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    await bot_edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        reply_markup=keyboards.build_verdict(plus_ids=plus_ids, minus_ids=minus_ids,
                                                                             student=student))
    await bot_answer_callback_query(query.id)


async def prc_finish_oral_round_callback(query: types.CallbackQuery, teacher: User):
    logger.debug('prc_finish_oral_round_callback')
    _, plus_ids, minus_ids = query.data.split('_')
    plus_ids = set() if not plus_ids else {int(prb_id) for prb_id in plus_ids.split(',')}
    minus_ids = set() if not minus_ids else {int(prb_id) for prb_id in minus_ids.split(',')}
    state = State.get_by_user_id(teacher.id)
    student_id = state['last_student_id']
    student = User.get_by_id(student_id)
    if not student:
        teacher_message = await bot.send_message(chat_id=query.message.chat.id,
                                                 text=f"–ß—Ç–æ-—Ç–æ –≤ –±–æ—Ç–µ —Å–ª–æ–º–∞–ª–æ—Å—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω. :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await bot_answer_callback_query(query.id)
        State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
        await process_regular_message(teacher_message)
        return

    pluses = [Problem.get_by_id(prb_id) for prb_id in plus_ids]
    minuses = [Problem.get_by_id(prb_id) for prb_id in minus_ids]
    human_readable_pluses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in pluses]
    human_readable_minuses = [f'{plus.lesson}{plus.level}.{plus.prob}{plus.item}' for plus in minuses]
    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª—é—Å–∏–∫–∏
    for problem in pluses:
        db.add_result(student_id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_SOLVED, None, RES_TYPE_ZOOM)
    for problem in minuses:
        db.delete_plus(student_id, problem.id, VERDICT_WRONG_ANSWER)
        db.add_result(student_id, problem.id, problem.level, problem.lesson, teacher.id, VERDICT_WRONG_ANSWER, None, RES_TYPE_ZOOM)
    await bot_edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=f"–®–∫–æ–ª—å–Ω–∏–∫: {student.token} {student.surname} {student.name}\n"
                                     f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–ª—é—Å—ã –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}"
                                     f"\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –º–∏–Ω—É—Å—ã –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_minuses)}",
                                reply_markup=None)
    try:
        student_state = State.get_by_user_id(student.id)
        student_message = await bot.send_message(chat_id=student.chat_id,
                                                 text=f"–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –≤–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª—é—Å–∏–∫–∏ –∑–∞ –∑–∞–¥–∞—á–∏: {', '.join(human_readable_pluses)}",
                                                 disable_notification=True)
        if student_state['state'] == STATE_STUDENT_IS_IN_CONFERENCE:
            State.set_by_user_id(student.id, STATE_GET_TASK_INFO)
            await process_regular_message(student_message)
    except aiogram.utils.exceptions.TelegramAPIError as e:
        logger.info(f'–®–∫–æ–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞ {student.chat_id}\n{e}')
    await bot_answer_callback_query(query.id)
    State.set_by_user_id(teacher.id, STATE_TEACHER_SELECT_ACTION)
    await process_regular_message(query.message)


async def exit_waitlist(message: types.Message):
    logger.debug('exit_waitlist')
    user = User.get_by_chat_id(message.chat.id)
    Waitlist.leave(user.id)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await process_regular_message(message)
